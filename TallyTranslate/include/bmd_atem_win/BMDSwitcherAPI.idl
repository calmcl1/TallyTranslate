/* -LICENSE-START-
** Copyright (c) 2015 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

/* BMDSwitcherAPI.idl */

import "unknwn.idl";

[uuid(8A92B919-156C-4D61-94EF-03F9BE4004B0),
version(1.0), helpstring("Blackmagic Switcher API Library")]
library BMDSwitcherAPI
{

// Type Declarations

typedef long long BMDSwitcherInputId;
typedef struct { unsigned char data[16]; } BMDSwitcherHash;
typedef long long BMDSwitcherAudioInputId;

// Enumeration Mapping

cpp_quote("#if 0")
cpp_quote("#endif")

/* Enum BMDSwitcherInputEventType - Used in IBMDSwitcherInputCallback */

typedef [v1_enum] enum	_BMDSwitcherInputEventType {
    bmdSwitcherInputEventTypeShortNameChanged                    = /* 'shnm' */ 0x73686E6D,
    bmdSwitcherInputEventTypeLongNameChanged                     = /* 'lgnm' */ 0x6C676E6D,
    bmdSwitcherInputEventTypeIsProgramTalliedChanged             = /* 'ipgt' */ 0x69706774,
    bmdSwitcherInputEventTypeIsPreviewTalliedChanged             = /* 'iprt' */ 0x69707274,
    bmdSwitcherInputEventTypeAvailableExternalPortTypesChanged   = /* 'aept' */ 0x61657074,
    bmdSwitcherInputEventTypeCurrentExternalPortTypeChanged      = /* 'cept' */ 0x63657074
} BMDSwitcherInputEventType;

/* Enum BMDSwitcherPortType - IBMDSwitcherInput Port Types */

typedef [v1_enum] enum	_BMDSwitcherPortType {
    bmdSwitcherPortTypeExternal                                  = /* 'extn' */ 0x6578746E,
    bmdSwitcherPortTypeBlack                                     = /* 'blak' */ 0x626C616B,
    bmdSwitcherPortTypeColorBars                                 = /* 'colb' */ 0x636F6C62,
    bmdSwitcherPortTypeColorGenerator                            = /* 'colg' */ 0x636F6C67,
    bmdSwitcherPortTypeMediaPlayerFill                           = /* 'mpfl' */ 0x6D70666C,
    bmdSwitcherPortTypeMediaPlayerCut                            = /* 'mpct' */ 0x6D706374,
    bmdSwitcherPortTypeSuperSource                               = /* 'ssrc' */ 0x73737263,
    bmdSwitcherPortTypeMixEffectBlockOutput                      = /* 'mebo' */ 0x6D65626F,
    bmdSwitcherPortTypeAuxOutput                                 = /* 'auxo' */ 0x6175786F,
    bmdSwitcherPortTypeKeyCutOutput                              = /* 'kcto' */ 0x6B63746F
} BMDSwitcherPortType;

/* Enum BMDSwitcherExternalPortType - IBMDSwitcherInput External Port Types */

typedef [v1_enum] enum	_BMDSwitcherExternalPortType {
    bmdSwitcherExternalPortTypeSDI                               = 0x00000001,
    bmdSwitcherExternalPortTypeHDMI                              = 0x00000002,
    bmdSwitcherExternalPortTypeComponent                         = 0x00000004,
    bmdSwitcherExternalPortTypeComposite                         = 0x00000008,
    bmdSwitcherExternalPortTypeSVideo                            = 0x00000010,
    bmdSwitcherExternalPortTypeInternal                          = 0x00000020,
    bmdSwitcherExternalPortTypeXLR                               = 0x00000040,
    bmdSwitcherExternalPortTypeAESEBU                            = 0x00000080,
    bmdSwitcherExternalPortTypeRCA                               = 0x00000100
} BMDSwitcherExternalPortType;

/* Enum BMDSwitcherInputAvailability - IBMDSwitcherInput availablity bits */

typedef [v1_enum] enum	_BMDSwitcherInputAvailability {
    bmdSwitcherInputAvailabilityMixEffectBlock0                  = 0x00000001,
    bmdSwitcherInputAvailabilityMixEffectBlock1                  = 0x00000002,
    bmdSwitcherInputAvailabilityAuxOutputs                       = 0x00000004,
    bmdSwitcherInputAvailabilityMultiView                        = 0x00000008,
    bmdSwitcherInputAvailabilitySuperSourceArt                   = 0x00000010,
    bmdSwitcherInputAvailabilitySuperSourceBox                   = 0x00000020,
    bmdSwitcherInputAvailabilityInputCut                         = 0x00000040
} BMDSwitcherInputAvailability;

/* Enum BMDSwitcherEventType - IBMDSwitcher event type */

typedef [v1_enum] enum	_BMDSwitcherEventType {
    bmdSwitcherEventTypeVideoModeChanged                         = /* 'sevd' */ 0x73657664,
    bmdSwitcherEventTypeMethodForDownConvertedSDChanged          = /* 'semd' */ 0x73656D64,
    bmdSwitcherEventTypeDownConvertedHDVideoModeChanged          = /* 'sedV' */ 0x73656456,
    bmdSwitcherEventTypeMultiViewVideoModeChanged                = /* 'semv' */ 0x73656D76,
    bmdSwitcherEventTypePowerStatusChanged                       = /* 'sepw' */ 0x73657077,
    bmdSwitcherEventTypeDisconnected                             = /* 'sedi' */ 0x73656469
} BMDSwitcherEventType;

/* Enum BMDSwitcherInputColorEventType - Used in IBMDSwitcherInputColorCallback */

typedef [v1_enum] enum	_BMDSwitcherInputColorEventType {
    bmdSwitcherInputColorEventTypeHueChanged                     = /* 'HueC' */ 0x48756543,
    bmdSwitcherInputColorEventTypeSaturationChanged              = /* 'SatC' */ 0x53617443,
    bmdSwitcherInputColorEventTypeLumaChanged                    = /* 'LumC' */ 0x4C756D43
} BMDSwitcherInputColorEventType;

/* Enum BMDSwitcherInputAuxEventType - Used in IBMDSwitcherInputAuxCallback */

typedef [v1_enum] enum	_BMDSwitcherInputAuxEventType {
    bmdSwitcherInputAuxEventTypeInputSourceChanged               = /* 'ipsC' */ 0x69707343
} BMDSwitcherInputAuxEventType;

/* Enum BMDSwitcherSuperSourceBoxEventType - Used in IBMDSwitcherSuperSourceBoxCallback */

typedef [v1_enum] enum	_BMDSwitcherSuperSourceBoxEventType {
    bmdSwitcherSuperSourceBoxEventTypeEnabledChanged             = /* 'enbC' */ 0x656E6243,
    bmdSwitcherSuperSourceBoxEventTypeInputSourceChanged         = /* 'ipsC' */ 0x69707343,
    bmdSwitcherSuperSourceBoxEventTypePositionXChanged           = /* 'psxC' */ 0x70737843,
    bmdSwitcherSuperSourceBoxEventTypePositionYChanged           = /* 'psyC' */ 0x70737943,
    bmdSwitcherSuperSourceBoxEventTypeSizeChanged                = /* 'sizC' */ 0x73697A43,
    bmdSwitcherSuperSourceBoxEventTypeCroppedChanged             = /* 'crpC' */ 0x63727043,
    bmdSwitcherSuperSourceBoxEventTypeCropTopChanged             = /* 'cptC' */ 0x63707443,
    bmdSwitcherSuperSourceBoxEventTypeCropBottomChanged          = /* 'cpbC' */ 0x63706243,
    bmdSwitcherSuperSourceBoxEventTypeCropLeftChanged            = /* 'cplC' */ 0x63706C43,
    bmdSwitcherSuperSourceBoxEventTypeCropRightChanged           = /* 'cprC' */ 0x63707243
} BMDSwitcherSuperSourceBoxEventType;

/* Enum BMDSwitcherInputSuperSourceEventType - Used in IBMDSwitcherInputSuperSourceCallback */

typedef [v1_enum] enum	_BMDSwitcherInputSuperSourceEventType {
    bmdSwitcherInputSuperSourceEventTypeInputFillChanged         = /* 'ipfC' */ 0x69706643,
    bmdSwitcherInputSuperSourceEventTypeInputCutChanged          = /* 'ipcC' */ 0x69706343,
    bmdSwitcherInputSuperSourceEventTypeArtOptionChanged         = /* 'atoC' */ 0x61746F43,
    bmdSwitcherInputSuperSourceEventTypePreMultipliedChanged     = /* 'shpC' */ 0x73687043,
    bmdSwitcherInputSuperSourceEventTypeClipChanged              = /* 'clpC' */ 0x636C7043,
    bmdSwitcherInputSuperSourceEventTypeGainChanged              = /* 'ganC' */ 0x67616E43,
    bmdSwitcherInputSuperSourceEventTypeInverseChanged           = /* 'invC' */ 0x696E7643,
    bmdSwitcherInputSuperSourceEventTypeBorderEnabledChanged     = /* 'enbC' */ 0x656E6243,
    bmdSwitcherInputSuperSourceEventTypeBorderBevelChanged       = /* 'bvlC' */ 0x62766C43,
    bmdSwitcherInputSuperSourceEventTypeBorderWidthOutChanged    = /* 'wdoC' */ 0x77646F43,
    bmdSwitcherInputSuperSourceEventTypeBorderWidthInChanged     = /* 'wdiC' */ 0x77646943,
    bmdSwitcherInputSuperSourceEventTypeBorderSoftnessOutChanged = /* 'sfoC' */ 0x73666F43,
    bmdSwitcherInputSuperSourceEventTypeBorderSoftnessInChanged  = /* 'sfiC' */ 0x73666943,
    bmdSwitcherInputSuperSourceEventTypeBorderBevelSoftnessChanged = /* 'bvsC' */ 0x62767343,
    bmdSwitcherInputSuperSourceEventTypeBorderBevelPositionChanged = /* 'bvpC' */ 0x62767043,
    bmdSwitcherInputSuperSourceEventTypeBorderHueChanged         = /* 'hueC' */ 0x68756543,
    bmdSwitcherInputSuperSourceEventTypeBorderSaturationChanged  = /* 'satC' */ 0x73617443,
    bmdSwitcherInputSuperSourceEventTypeBorderLumaChanged        = /* 'lumC' */ 0x6C756D43,
    bmdSwitcherInputSuperSourceEventTypeBorderLightSourceDirectionChanged = /* 'lsdC' */ 0x6C736443,
    bmdSwitcherInputSuperSourceEventTypeBorderLightSourceAltitudeChanged = /* 'lsaC' */ 0x6C736143
} BMDSwitcherInputSuperSourceEventType;

/* Enum BMDSwitcherBorderBevelOption - Border Bevel Option for DVE Key and SuperSource Box */

typedef [v1_enum] enum	_BMDSwitcherBorderBevelOption {
    bmdSwitcherBorderBevelOptionNone                             = /* 'none' */ 0x6E6F6E65,
    bmdSwitcherBorderBevelOptionInOut                            = /* 'inot' */ 0x696E6F74,
    bmdSwitcherBorderBevelOptionIn                               = /* 'inin' */ 0x696E696E,
    bmdSwitcherBorderBevelOptionOut                              = /* 'otot' */ 0x6F746F74
} BMDSwitcherBorderBevelOption;

/* Enum BMDSwitcherTransitionMixParametersEventType - Used in IBMDSwitcherTransitionMixParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherTransitionMixParametersEventType {
    bmdSwitcherTransitionMixParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543
} BMDSwitcherTransitionMixParametersEventType;

/* Enum BMDSwitcherTransitionDipParametersEventType - Used in IBMDSwitcherTransitionDipParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherTransitionDipParametersEventType {
    bmdSwitcherTransitionDipParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionDipParametersEventTypeInputDipChanged   = /* 'ipdC' */ 0x69706443
} BMDSwitcherTransitionDipParametersEventType;

/* Enum BMDSwitcherTransitionWipeParametersEventType - Used in IBMDSwitcherTransitionWipeParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherTransitionWipeParametersEventType {
    bmdSwitcherTransitionWipeParametersEventTypeRateChanged      = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionWipeParametersEventTypePatternChanged   = /* 'patC' */ 0x70617443,
    bmdSwitcherTransitionWipeParametersEventTypeBorderSizeChanged = /* 'bdsC' */ 0x62647343,
    bmdSwitcherTransitionWipeParametersEventTypeInputBorderChanged = /* 'ipbC' */ 0x69706243,
    bmdSwitcherTransitionWipeParametersEventTypeSymmetryChanged  = /* 'symC' */ 0x73796D43,
    bmdSwitcherTransitionWipeParametersEventTypeSoftnessChanged  = /* 'sftC' */ 0x73667443,
    bmdSwitcherTransitionWipeParametersEventTypeHorizontalOffsetChanged = /* 'hofC' */ 0x686F6643,
    bmdSwitcherTransitionWipeParametersEventTypeVerticalOffsetChanged = /* 'vofC' */ 0x766F6643,
    bmdSwitcherTransitionWipeParametersEventTypeReverseChanged   = /* 'revC' */ 0x72657643,
    bmdSwitcherTransitionWipeParametersEventTypeFlipFlopChanged  = /* 'ffpC' */ 0x66667043
} BMDSwitcherTransitionWipeParametersEventType;

/* Enum BMDSwitcherTransitionDVEParametersEventType - Used in IBMDSwitcherTransitionDVEParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherTransitionDVEParametersEventType {
    bmdSwitcherTransitionDVEParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionDVEParametersEventTypeLogoRateChanged   = /* 'lrtC' */ 0x6C727443,
    bmdSwitcherTransitionDVEParametersEventTypeReverseChanged    = /* 'revC' */ 0x72657643,
    bmdSwitcherTransitionDVEParametersEventTypeFlipFlopChanged   = /* 'ffpC' */ 0x66667043,
    bmdSwitcherTransitionDVEParametersEventTypeStyleChanged      = /* 'styC' */ 0x73747943,
    bmdSwitcherTransitionDVEParametersEventTypeInputFillChanged  = /* 'ipfC' */ 0x69706643,
    bmdSwitcherTransitionDVEParametersEventTypeInputCutChanged   = /* 'ipcC' */ 0x69706343,
    bmdSwitcherTransitionDVEParametersEventTypeEnableKeyChanged  = /* 'enkC' */ 0x656E6B43,
    bmdSwitcherTransitionDVEParametersEventTypePreMultipliedChanged = /* 'pmuC' */ 0x706D7543,
    bmdSwitcherTransitionDVEParametersEventTypeClipChanged       = /* 'clpC' */ 0x636C7043,
    bmdSwitcherTransitionDVEParametersEventTypeGainChanged       = /* 'gneC' */ 0x676E6543,
    bmdSwitcherTransitionDVEParametersEventTypeInverseChanged    = /* 'invC' */ 0x696E7643
} BMDSwitcherTransitionDVEParametersEventType;

/* Enum BMDSwitcherTransitionStingerParametersEventType - Used in IBMDSwitcherTransitionStingerParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherTransitionStingerParametersEventType {
    bmdSwitcherTransitionStingerParametersEventTypeSourceChanged = /* 'srcC' */ 0x73726343,
    bmdSwitcherTransitionStingerParametersEventTypePreMultipliedChanged = /* 'pmuC' */ 0x706D7543,
    bmdSwitcherTransitionStingerParametersEventTypeClipChanged   = /* 'clpC' */ 0x636C7043,
    bmdSwitcherTransitionStingerParametersEventTypeGainChanged   = /* 'gneC' */ 0x676E6543,
    bmdSwitcherTransitionStingerParametersEventTypeInverseChanged = /* 'invC' */ 0x696E7643,
    bmdSwitcherTransitionStingerParametersEventTypePrerollChanged = /* 'prlC' */ 0x70726C43,
    bmdSwitcherTransitionStingerParametersEventTypeClipDurationChanged = /* 'cdrC' */ 0x63647243,
    bmdSwitcherTransitionStingerParametersEventTypeTriggerPointChanged = /* 'tgpC' */ 0x74677043,
    bmdSwitcherTransitionStingerParametersEventTypeMixRateChanged = /* 'mxrC' */ 0x6D787243
} BMDSwitcherTransitionStingerParametersEventType;

/* Enum BMDSwitcherTransitionParametersEventType - Used in IBMDSwitcherTransitionParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherTransitionParametersEventType {
    bmdSwitcherTransitionParametersEventTypeTransitionStyleChanged = /* 'styC' */ 0x73747943,
    bmdSwitcherTransitionParametersEventTypeNextTransitionStyleChanged = /* 'nstC' */ 0x6E737443,
    bmdSwitcherTransitionParametersEventTypeTransitionSelectionChanged = /* 'sltC' */ 0x736C7443,
    bmdSwitcherTransitionParametersEventTypeNextTransitionSelectionChanged = /* 'nslC' */ 0x6E736C43
} BMDSwitcherTransitionParametersEventType;

/* Enum BMDSwitcherSuperSourceArtOption - SuperSource Art Option */

typedef [v1_enum] enum	_BMDSwitcherSuperSourceArtOption {
    bmdSwitcherSuperSourceArtOptionBackground                    = /* 'bkgd' */ 0x626B6764,
    bmdSwitcherSuperSourceArtOptionForeground                    = /* 'frgd' */ 0x66726764
} BMDSwitcherSuperSourceArtOption;

/* Enum BMDSwitcherMixEffectBlockPropertyId - IBMDSwitcherMixEffectBlock Property ID */

typedef [v1_enum] enum	_BMDSwitcherMixEffectBlockPropertyId {
    bmdSwitcherMixEffectBlockPropertyIdProgramInput              = /* 'pgip' */ 0x70676970,	// Int type (BMDSwitcherInputId), Get/Set
    bmdSwitcherMixEffectBlockPropertyIdPreviewInput              = /* 'pvip' */ 0x70766970,	// Int type (BMDSwitcherInputId), Get/Set
    bmdSwitcherMixEffectBlockPropertyIdTransitionPosition        = /* 'tsps' */ 0x74737073,	// Float type, Get/Set
    bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining = /* 'tfrm' */ 0x7466726D,	// Int type, Get only
    bmdSwitcherMixEffectBlockPropertyIdInTransition              = /* 'iits' */ 0x69697473,	// Flag type, Get only
    bmdSwitcherMixEffectBlockPropertyIdFadeToBlackFramesRemaining = /* 'ffrm' */ 0x6666726D,	// Int type, Get only
    bmdSwitcherMixEffectBlockPropertyIdInFadeToBlack             = /* 'iifb' */ 0x69696662,	// Flag type, Get only
    bmdSwitcherMixEffectBlockPropertyIdPreviewLive               = /* 'pvlv' */ 0x70766C76,	// Flag type, Get only
    bmdSwitcherMixEffectBlockPropertyIdPreviewTransition         = /* 'pvts' */ 0x70767473,	// Flag type, Get/Set
    bmdSwitcherMixEffectBlockPropertyIdInputAvailabilityMask     = /* 'iavm' */ 0x6961766D,	// Int type (BMDSwitcherInputAvailability), Get only
    bmdSwitcherMixEffectBlockPropertyIdFadeToBlackRate           = /* 'ftbr' */ 0x66746272,	// Int type, Get/Set
    bmdSwitcherMixEffectBlockPropertyIdFadeToBlackFullyBlack     = /* 'ftbb' */ 0x66746262,	// Flag type, Get/Set
    bmdSwitcherMixEffectBlockPropertyIdFadeToBlackInTransition   = /* 'ftbt' */ 0x66746274	// Flag type, Get only
} BMDSwitcherMixEffectBlockPropertyId;

/* Enum BMDSwitcherAudioMonitorOutputEventType - Used in IBMDSwitcherAudioMonitorOutputCallback */

typedef [v1_enum] enum	_BMDSwitcherAudioMonitorOutputEventType {
    bmdSwitcherAudioMonitorOutputEventTypeMonitorEnableChanged   = /* 'mneC' */ 0x6D6E6543,
    bmdSwitcherAudioMonitorOutputEventTypeGainChanged            = /* 'mgnC' */ 0x6D676E43,
    bmdSwitcherAudioMonitorOutputEventTypeMuteChanged            = /* 'mteC' */ 0x6D746543,
    bmdSwitcherAudioMonitorOutputEventTypeSoloChanged            = /* 'solC' */ 0x736F6C43,
    bmdSwitcherAudioMonitorOutputEventTypeSoloInputChanged       = /* 'sliC' */ 0x736C6943,
    bmdSwitcherAudioMonitorOutputEventTypeDimChanged             = /* 'dimC' */ 0x64696D43,
    bmdSwitcherAudioMonitorOutputEventTypeDimLevelChanged        = /* 'dmlC' */ 0x646D6C43
} BMDSwitcherAudioMonitorOutputEventType;

/* Enum BMDSwitcherAudioInputEventType - Used in IBMDSwitcherAudioInputCallback */

typedef [v1_enum] enum	_BMDSwitcherAudioInputEventType {
    bmdSwitcherAudioInputEventTypeCurrentExternalPortTypeChanged = /* 'eptC' */ 0x65707443,
    bmdSwitcherAudioInputEventTypeMixOptionChanged               = /* 'mxoC' */ 0x6D786F43,
    bmdSwitcherAudioInputEventTypeGainChanged                    = /* 'ignC' */ 0x69676E43,
    bmdSwitcherAudioInputEventTypeBalanceChanged                 = /* 'balC' */ 0x62616C43,
    bmdSwitcherAudioInputEventTypeIsMixedInChanged               = /* 'imiC' */ 0x696D6943
} BMDSwitcherAudioInputEventType;

/* Enum BMDSwitcherAudioMixerEventType - Used in IBMDSwitcherAudioMixerCallback */

typedef [v1_enum] enum	_BMDSwitcherAudioMixerEventType {
    bmdSwitcherAudioMixerEventTypeProgramOutGainChanged          = /* 'pgnC' */ 0x70676E43,
    bmdSwitcherAudioMixerEventTypeProgramOutBalanceChanged       = /* 'balC' */ 0x62616C43,
    bmdSwitcherAudioMixerEventTypeProgramOutFollowFadeToBlackChanged = /* 'ffbC' */ 0x66666243
} BMDSwitcherAudioMixerEventType;

/* Enum BMDSwitcherAudioInputType - Audio Input Type */

typedef [v1_enum] enum	_BMDSwitcherAudioInputType {
    bmdSwitcherAudioInputTypeEmbeddedWithVideo                   = /* 'ewvd' */ 0x65777664,
    bmdSwitcherAudioInputTypeMediaPlayer                         = /* 'mdpy' */ 0x6D647079,
    bmdSwitcherAudioInputTypeAudioIn                             = /* 'adin' */ 0x6164696E
} BMDSwitcherAudioInputType;

/* Enum BMDSwitcherAudioMixOption - Audio Mix Option */

typedef [v1_enum] enum	_BMDSwitcherAudioMixOption {
    bmdSwitcherAudioMixOptionOff                                 = /* 'offf' */ 0x6F666666,
    bmdSwitcherAudioMixOptionOn                                  = /* 'onon' */ 0x6F6E6F6E,
    bmdSwitcherAudioMixOptionAudioFollowVideo                    = /* 'afvv' */ 0x61667676
} BMDSwitcherAudioMixOption;

/* Enum BMDSwitcherTransitionStyle - Transition styles used in IBMDSwitcherTransitionParameters */

typedef [v1_enum] enum	_BMDSwitcherTransitionStyle {
    bmdSwitcherTransitionStyleMix                                = /* 'mixx' */ 0x6D697878,
    bmdSwitcherTransitionStyleDip                                = /* 'dipp' */ 0x64697070,
    bmdSwitcherTransitionStyleWipe                               = /* 'wipe' */ 0x77697065,
    bmdSwitcherTransitionStyleDVE                                = /* 'dvee' */ 0x64766565,
    bmdSwitcherTransitionStyleStinger                            = /* 'stng' */ 0x73746E67
} BMDSwitcherTransitionStyle;

/* Enum BMDSwitcherTransitionSelection - Used in IBMDSwitcherTransitionParameters */

typedef [v1_enum] enum	_BMDSwitcherTransitionSelection {
    bmdSwitcherTransitionSelectionBackground                     = 0x00000001,
    bmdSwitcherTransitionSelectionKey1                           = 0x00000002,
    bmdSwitcherTransitionSelectionKey2                           = 0x00000004,
    bmdSwitcherTransitionSelectionKey3                           = 0x00000008,
    bmdSwitcherTransitionSelectionKey4                           = 0x00000010
} BMDSwitcherTransitionSelection;

/* Enum BMDSwitcherKeyLumaParametersEventType - Used in IBMDSwitcherKeyLumaParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherKeyLumaParametersEventType {
    bmdSwitcherKeyLumaParametersEventTypePreMultipliedChanged    = /* 'pmlC' */ 0x706D6C43,
    bmdSwitcherKeyLumaParametersEventTypeClipChanged             = /* 'clpC' */ 0x636C7043,
    bmdSwitcherKeyLumaParametersEventTypeGainChanged             = /* 'gneC' */ 0x676E6543,
    bmdSwitcherKeyLumaParametersEventTypeInverseChanged          = /* 'invC' */ 0x696E7643
} BMDSwitcherKeyLumaParametersEventType;

/* Enum BMDSwitcherKeyChromaParametersEventType - Used in IBMDSwitcherKeyChromaParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherKeyChromaParametersEventType {
    bmdSwitcherKeyChromaParametersEventTypeHueChanged            = /* 'hueC' */ 0x68756543,
    bmdSwitcherKeyChromaParametersEventTypeGainChanged           = /* 'gneC' */ 0x676E6543,
    bmdSwitcherKeyChromaParametersEventTypeYSuppressChanged      = /* 'yspC' */ 0x79737043,
    bmdSwitcherKeyChromaParametersEventTypeLiftChanged           = /* 'lftC' */ 0x6C667443,
    bmdSwitcherKeyChromaParametersEventTypeNarrowChanged         = /* 'nrwC' */ 0x6E727743
} BMDSwitcherKeyChromaParametersEventType;

/* Enum BMDSwitcherKeyPatternParametersEventType - Used in IBMDSwitcherKeyPatternParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherKeyPatternParametersEventType {
    bmdSwitcherKeyPatternParametersEventTypePatternChanged       = /* 'patC' */ 0x70617443,
    bmdSwitcherKeyPatternParametersEventTypeSizeChanged          = /* 'szeC' */ 0x737A6543,
    bmdSwitcherKeyPatternParametersEventTypeSymmetryChanged      = /* 'symC' */ 0x73796D43,
    bmdSwitcherKeyPatternParametersEventTypeSoftnessChanged      = /* 'sftC' */ 0x73667443,
    bmdSwitcherKeyPatternParametersEventTypeHorizontalOffsetChanged = /* 'hzoC' */ 0x687A6F43,
    bmdSwitcherKeyPatternParametersEventTypeVerticalOffsetChanged = /* 'vtoC' */ 0x76746F43,
    bmdSwitcherKeyPatternParametersEventTypeInverseChanged       = /* 'invC' */ 0x696E7643
} BMDSwitcherKeyPatternParametersEventType;

/* Enum BMDSwitcherKeyFlyKeyFrameParametersEventType - Used in IBMDSwitcherKeyFlyKeyFrameParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherKeyFlyKeyFrameParametersEventType {
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeSizeXChanged     = /* 'fszx' */ 0x66737A78,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeSizeYChanged     = /* 'fszy' */ 0x66737A79,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypePositionXChanged = /* 'fpsx' */ 0x66707378,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypePositionYChanged = /* 'fpsy' */ 0x66707379,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeRotationChanged  = /* 'frot' */ 0x66726F74,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderWidthOutChanged = /* 'fbwo' */ 0x6662776F,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderWidthInChanged = /* 'fbwi' */ 0x66627769,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSoftnessOutChanged = /* 'fbso' */ 0x6662736F,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSoftnessInChanged = /* 'fbsi' */ 0x66627369,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderBevelSoftnessChanged = /* 'fbbs' */ 0x66626273,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderBevelPositionChanged = /* 'fbbp' */ 0x66626270,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderHueChanged = /* 'fbhu' */ 0x66626875,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSaturationChanged = /* 'fbst' */ 0x66627374,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLumaChanged = /* 'fblm' */ 0x66626C6D,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLightSourceDirectionChanged = /* 'fbld' */ 0x66626C64,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLightSourceAltitudeChanged = /* 'fbla' */ 0x66626C61
} BMDSwitcherKeyFlyKeyFrameParametersEventType;

/* Enum BMDSwitcherKeyFlyParametersEventType - Used in IBMDSwitcherKeyFlyParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherKeyFlyParametersEventType {
    bmdSwitcherKeyFlyParametersEventTypeFlyChanged               = /* 'flyC' */ 0x666C7943,
    bmdSwitcherKeyFlyParametersEventTypeCanFlyChanged            = /* 'cflC' */ 0x63666C43,
    bmdSwitcherKeyFlyParametersEventTypeRateChanged              = /* 'rteC' */ 0x72746543,
    bmdSwitcherKeyFlyParametersEventTypeSizeXChanged             = /* 'szxC' */ 0x737A7843,
    bmdSwitcherKeyFlyParametersEventTypeSizeYChanged             = /* 'szyC' */ 0x737A7943,
    bmdSwitcherKeyFlyParametersEventTypePositionXChanged         = /* 'psxC' */ 0x70737843,
    bmdSwitcherKeyFlyParametersEventTypePositionYChanged         = /* 'psyC' */ 0x70737943,
    bmdSwitcherKeyFlyParametersEventTypeRotationChanged          = /* 'rotC' */ 0x726F7443,
    bmdSwitcherKeyFlyParametersEventTypeIsKeyFrameStoredChanged  = /* 'kfsC' */ 0x6B667343,
    bmdSwitcherKeyFlyParametersEventTypeIsAtKeyFramesChanged     = /* 'akfC' */ 0x616B6643,
    bmdSwitcherKeyFlyParametersEventTypeIsRunningChanged         = /* 'rngC' */ 0x726E6743
} BMDSwitcherKeyFlyParametersEventType;

/* Enum BMDSwitcherKeyDVEParametersEventType - Used in IBMDSwitcherKeyDVEParametersCallback */

typedef [v1_enum] enum	_BMDSwitcherKeyDVEParametersEventType {
    bmdSwitcherKeyDVEParametersEventTypeShadowChanged            = /* 'shdC' */ 0x73686443,
    bmdSwitcherKeyDVEParametersEventTypeLightSourceDirectionChanged = /* 'ltdC' */ 0x6C746443,
    bmdSwitcherKeyDVEParametersEventTypeLightSourceAltitudeChanged = /* 'ltaC' */ 0x6C746143,
    bmdSwitcherKeyDVEParametersEventTypeBorderEnabledChanged     = /* 'benC' */ 0x62656E43,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelChanged       = /* 'bbvC' */ 0x62627643,
    bmdSwitcherKeyDVEParametersEventTypeBorderWidthInChanged     = /* 'bwiC' */ 0x62776943,
    bmdSwitcherKeyDVEParametersEventTypeBorderWidthOutChanged    = /* 'bwoC' */ 0x62776F43,
    bmdSwitcherKeyDVEParametersEventTypeBorderSoftnessInChanged  = /* 'bsiC' */ 0x62736943,
    bmdSwitcherKeyDVEParametersEventTypeBorderSoftnessOutChanged = /* 'bsoC' */ 0x62736F43,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelSoftnessChanged = /* 'bbsC' */ 0x62627343,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelPositionChanged = /* 'bbpC' */ 0x62627043,
    bmdSwitcherKeyDVEParametersEventTypeBorderOpacityChanged     = /* 'bopC' */ 0x626F7043,
    bmdSwitcherKeyDVEParametersEventTypeBorderHueChanged         = /* 'bhuC' */ 0x62687543,
    bmdSwitcherKeyDVEParametersEventTypeBorderSaturationChanged  = /* 'bstC' */ 0x62737443,
    bmdSwitcherKeyDVEParametersEventTypeBorderLumaChanged        = /* 'blmC' */ 0x626C6D43,
    bmdSwitcherKeyDVEParametersEventTypeMaskedChanged            = /* 'mskC' */ 0x6D736B43,
    bmdSwitcherKeyDVEParametersEventTypeMaskTopChanged           = /* 'mtpC' */ 0x6D747043,
    bmdSwitcherKeyDVEParametersEventTypeMaskBottomChanged        = /* 'mbtC' */ 0x6D627443,
    bmdSwitcherKeyDVEParametersEventTypeMaskLeftChanged          = /* 'mlfC' */ 0x6D6C6643,
    bmdSwitcherKeyDVEParametersEventTypeMaskRightChanged         = /* 'mrtC' */ 0x6D727443
} BMDSwitcherKeyDVEParametersEventType;

/* Enum BMDSwitcherKeyEventType - Used in IBMDSwitcherKeyCallback */

typedef [v1_enum] enum	_BMDSwitcherKeyEventType {
    bmdSwitcherKeyEventTypeTypeChanged                           = /* 'typC' */ 0x74797043,
    bmdSwitcherKeyEventTypeInputCutChanged                       = /* 'ipcC' */ 0x69706343,
    bmdSwitcherKeyEventTypeInputFillChanged                      = /* 'ipfC' */ 0x69706643,
    bmdSwitcherKeyEventTypeOnAirChanged                          = /* 'onaC' */ 0x6F6E6143,
    bmdSwitcherKeyEventTypeCanBeDVEKeyChanged                    = /* 'cbdC' */ 0x63626443,
    bmdSwitcherKeyEventTypeMaskedChanged                         = /* 'mkeC' */ 0x6D6B6543,
    bmdSwitcherKeyEventTypeMaskTopChanged                        = /* 'mktC' */ 0x6D6B7443,
    bmdSwitcherKeyEventTypeMaskBottomChanged                     = /* 'mkbC' */ 0x6D6B6243,
    bmdSwitcherKeyEventTypeMaskLeftChanged                       = /* 'mklC' */ 0x6D6B6C43,
    bmdSwitcherKeyEventTypeMaskRightChanged                      = /* 'mkrC' */ 0x6D6B7243
} BMDSwitcherKeyEventType;

/* Enum BMDSwitcherKeyType - (Upstream) Key types */

typedef [v1_enum] enum	_BMDSwitcherKeyType {
    bmdSwitcherKeyTypeLuma                                       = /* 'luma' */ 0x6C756D61,
    bmdSwitcherKeyTypeChroma                                     = /* 'chrm' */ 0x6368726D,
    bmdSwitcherKeyTypePattern                                    = /* 'ptrn' */ 0x7074726E,
    bmdSwitcherKeyTypeDVE                                        = /* 'dvee' */ 0x64766565
} BMDSwitcherKeyType;

/* Enum BMDSwitcherPatternStyle - Pattern style for Wipe Transition, or Pattern Keys */

typedef [v1_enum] enum	_BMDSwitcherPatternStyle {
    bmdSwitcherPatternStyleLeftToRightBar                        = /* 'ltrb' */ 0x6C747262,
    bmdSwitcherPatternStyleTopToBottomBar                        = /* 'ttbb' */ 0x74746262,
    bmdSwitcherPatternStyleHorizontalBarnDoor                    = /* 'hbnd' */ 0x68626E64,
    bmdSwitcherPatternStyleVerticalBarnDoor                      = /* 'vbnd' */ 0x76626E64,
    bmdSwitcherPatternStyleCornersInFourBox                      = /* 'cifb' */ 0x63696662,
    bmdSwitcherPatternStyleRectangleIris                         = /* 'reci' */ 0x72656369,
    bmdSwitcherPatternStyleDiamondIris                           = /* 'diai' */ 0x64696169,
    bmdSwitcherPatternStyleCircleIris                            = /* 'ciri' */ 0x63697269,
    bmdSwitcherPatternStyleTopLeftBox                            = /* 'tlbx' */ 0x746C6278,
    bmdSwitcherPatternStyleTopRightBox                           = /* 'trbx' */ 0x74726278,
    bmdSwitcherPatternStyleBottomRightBox                        = /* 'brbx' */ 0x62726278,
    bmdSwitcherPatternStyleBottomLeftBox                         = /* 'blbx' */ 0x626C6278,
    bmdSwitcherPatternStyleTopCentreBox                          = /* 'tcbx' */ 0x74636278,
    bmdSwitcherPatternStyleRightCentreBox                        = /* 'rcbx' */ 0x72636278,
    bmdSwitcherPatternStyleBottomCentreBox                       = /* 'bcbx' */ 0x62636278,
    bmdSwitcherPatternStyleLeftCentreBox                         = /* 'lcbx' */ 0x6C636278,
    bmdSwitcherPatternStyleTopLeftDiagonal                       = /* 'tldg' */ 0x746C6467,
    bmdSwitcherPatternStyleTopRightDiagonal                      = /* 'trdg' */ 0x74726467
} BMDSwitcherPatternStyle;

/* Enum BMDSwitcherVideoMode - Video mode of Switcher */

typedef [v1_enum] enum	_BMDSwitcherVideoMode {
    bmdSwitcherVideoMode525i5994NTSC                             = /* 'ntsc' */ 0x6E747363,
    bmdSwitcherVideoMode625i50PAL                                = /* 'pall' */ 0x70616C6C,
    bmdSwitcherVideoMode525i5994Anamorphic                       = /* 'ntsA' */ 0x6E747341,
    bmdSwitcherVideoMode625i50Anamorphic                         = /* 'palA' */ 0x70616C41,
    bmdSwitcherVideoMode720p50                                   = /* '72p0' */ 0x37327030,
    bmdSwitcherVideoMode720p5994                                 = /* '72p9' */ 0x37327039,
    bmdSwitcherVideoMode1080i50                                  = /* '10i0' */ 0x31306930,
    bmdSwitcherVideoMode1080i5994                                = /* '10i9' */ 0x31306939,
    bmdSwitcherVideoMode1080p2398                                = /* '10p3' */ 0x31307033,
    bmdSwitcherVideoMode1080p24                                  = /* '10p4' */ 0x31307034,
    bmdSwitcherVideoMode1080p25                                  = /* '10p5' */ 0x31307035,
    bmdSwitcherVideoMode1080p2997                                = /* '10p7' */ 0x31307037,
    bmdSwitcherVideoMode1080p50                                  = /* '10p0' */ 0x31307030,
    bmdSwitcherVideoMode1080p5994                                = /* '10p9' */ 0x31307039,
    bmdSwitcherVideoMode4KHDp2398                                = /* '4H23' */ 0x34483233,
    bmdSwitcherVideoMode4KHDp24                                  = /* '4H24' */ 0x34483234,
    bmdSwitcherVideoMode4KHDp25                                  = /* '4H25' */ 0x34483235,
    bmdSwitcherVideoMode4KHDp2997                                = /* '4H29' */ 0x34483239,
    bmdSwitcherVideoMode4KHDp50                                  = /* '4H50' */ 0x34483530,
    bmdSwitcherVideoMode4KHDp5994                                = /* '4H59' */ 0x34483539
} BMDSwitcherVideoMode;

/* Enum BMDSwitcherDownConversionMethod - Down convert method used when converting 16:9 to 4:3 */

typedef [v1_enum] enum	_BMDSwitcherDownConversionMethod {
    bmdSwitcherDownConversionMethodCentreCut                     = /* 'dmcc' */ 0x646D6363,
    bmdSwitcherDownConversionMethodLetterbox                     = /* 'dmlb' */ 0x646D6C62,
    bmdSwitcherDownConversionMethodAnamorphic                    = /* 'dmam' */ 0x646D616D
} BMDSwitcherDownConversionMethod;

/* Enum BMDSwitcherPowerStatus - IBMDSwitcher Power Status bits */

typedef [v1_enum] enum	_BMDSwitcherPowerStatus {
    bmdSwitcherPowerStatusSupply1                                = 0x01,
    bmdSwitcherPowerStatusSupply2                                = 0x02
} BMDSwitcherPowerStatus;

/* Enum BMDSwitcherPixelFormat - Pixel Format used in IBMDSwitcherFrame */

typedef [v1_enum] enum	_BMDSwitcherPixelFormat {
    bmdSwitcherPixelFormat8BitARGB                               = /* 'argb' */ 0x61726762,
    bmdSwitcherPixelFormat8BitXRGB                               = /* 'xrgb' */ 0x78726762,
    bmdSwitcherPixelFormat8BitYUV                                = /* '2vuy' */ 0x32767579,
    bmdSwitcherPixelFormat10BitYUVA                              = /* 'yuva' */ 0x79757661
} BMDSwitcherPixelFormat;

/* Enum BMDSwitcherFlyKeyFrame - Used in IBMDSwitcherKeyFlyParameters */

typedef [v1_enum] enum	_BMDSwitcherFlyKeyFrame {
    bmdSwitcherFlyKeyFrameFull                                   = 0x00000001,
    bmdSwitcherFlyKeyFrameInfinityCentreOfKey                    = 0x00000002,
    bmdSwitcherFlyKeyFrameInfinityTopLeft                        = 0x00000004,
    bmdSwitcherFlyKeyFrameInfinityTop                            = 0x00000008,
    bmdSwitcherFlyKeyFrameInfinityTopRight                       = 0x00000010,
    bmdSwitcherFlyKeyFrameInfinityLeft                           = 0x00000020,
    bmdSwitcherFlyKeyFrameInfinityCentre                         = 0x00000040,
    bmdSwitcherFlyKeyFrameInfinityRight                          = 0x00000080,
    bmdSwitcherFlyKeyFrameInfinityBottomLeft                     = 0x00000100,
    bmdSwitcherFlyKeyFrameInfinityBottom                         = 0x00000200,
    bmdSwitcherFlyKeyFrameInfinityBottomRight                    = 0x00000400,
    bmdSwitcherFlyKeyFrameA                                      = 0x00000800,
    bmdSwitcherFlyKeyFrameB                                      = 0x00001000
} BMDSwitcherFlyKeyFrame;

/* Enum BMDSwitcherDVETransitionStyle - Transition style for DVE Transition */

typedef [v1_enum] enum	_BMDSwitcherDVETransitionStyle {
    bmdSwitcherDVETransitionStyleSwooshTopLeft                   = /* 'swtl' */ 0x7377746C,
    bmdSwitcherDVETransitionStyleSwooshTop                       = /* 'swtc' */ 0x73777463,
    bmdSwitcherDVETransitionStyleSwooshTopRight                  = /* 'swtr' */ 0x73777472,
    bmdSwitcherDVETransitionStyleSwooshLeft                      = /* 'swlc' */ 0x73776C63,
    bmdSwitcherDVETransitionStyleSwooshRight                     = /* 'swrc' */ 0x73777263,
    bmdSwitcherDVETransitionStyleSwooshBottomLeft                = /* 'swbl' */ 0x7377626C,
    bmdSwitcherDVETransitionStyleSwooshBottom                    = /* 'swbc' */ 0x73776263,
    bmdSwitcherDVETransitionStyleSwooshBottomRight               = /* 'swbr' */ 0x73776272,
    bmdSwitcherDVETransitionStyleSpinCWTopLeft                   = /* 'sptl' */ 0x7370746C,
    bmdSwitcherDVETransitionStyleSpinCWTopRight                  = /* 'sptr' */ 0x73707472,
    bmdSwitcherDVETransitionStyleSpinCWBottomLeft                = /* 'spbl' */ 0x7370626C,
    bmdSwitcherDVETransitionStyleSpinCWBottomRight               = /* 'spbr' */ 0x73706272,
    bmdSwitcherDVETransitionStyleSpinCCWTopLeft                  = /* 'sctl' */ 0x7363746C,
    bmdSwitcherDVETransitionStyleSpinCCWTopRight                 = /* 'sctr' */ 0x73637472,
    bmdSwitcherDVETransitionStyleSpinCCWBottomLeft               = /* 'scbl' */ 0x7363626C,
    bmdSwitcherDVETransitionStyleSpinCCWBottomRight              = /* 'scbr' */ 0x73636272,
    bmdSwitcherDVETransitionStyleSqueezeTopLeft                  = /* 'sqtl' */ 0x7371746C,
    bmdSwitcherDVETransitionStyleSqueezeTop                      = /* 'sqtc' */ 0x73717463,
    bmdSwitcherDVETransitionStyleSqueezeTopRight                 = /* 'sqtr' */ 0x73717472,
    bmdSwitcherDVETransitionStyleSqueezeLeft                     = /* 'sqlc' */ 0x73716C63,
    bmdSwitcherDVETransitionStyleSqueezeRight                    = /* 'sqrc' */ 0x73717263,
    bmdSwitcherDVETransitionStyleSqueezeBottomLeft               = /* 'sqbl' */ 0x7371626C,
    bmdSwitcherDVETransitionStyleSqueezeBottom                   = /* 'sqbc' */ 0x73716263,
    bmdSwitcherDVETransitionStyleSqueezeBottomRight              = /* 'sqbr' */ 0x73716272,
    bmdSwitcherDVETransitionStylePushTopLeft                     = /* 'sutl' */ 0x7375746C,
    bmdSwitcherDVETransitionStylePushTop                         = /* 'sutc' */ 0x73757463,
    bmdSwitcherDVETransitionStylePushTopRight                    = /* 'sutr' */ 0x73757472,
    bmdSwitcherDVETransitionStylePushLeft                        = /* 'sulc' */ 0x73756C63,
    bmdSwitcherDVETransitionStylePushRight                       = /* 'surc' */ 0x73757263,
    bmdSwitcherDVETransitionStylePushBottomLeft                  = /* 'subl' */ 0x7375626C,
    bmdSwitcherDVETransitionStylePushBottom                      = /* 'subc' */ 0x73756263,
    bmdSwitcherDVETransitionStylePushBottomRight                 = /* 'subr' */ 0x73756272,
    bmdSwitcherDVETransitionStyleGraphicCWSpin                   = /* 'sgcw' */ 0x73676377,
    bmdSwitcherDVETransitionStyleGraphicCCWSpin                  = /* 'sgcc' */ 0x73676363,
    bmdSwitcherDVETransitionStyleGraphicLogoWipe                 = /* 'sglw' */ 0x73676C77
} BMDSwitcherDVETransitionStyle;

/* Enum BMDSwitcherStingerTransitionSource - Transition source used in Stinger Transitions */

typedef [v1_enum] enum	_BMDSwitcherStingerTransitionSource {
    bmdSwitcherStingerTransitionSourceMediaPlayer1               = /* 'smp1' */ 0x736D7031,
    bmdSwitcherStingerTransitionSourceMediaPlayer2               = /* 'smp2' */ 0x736D7032,
    bmdSwitcherStingerTransitionSourceMediaPlayer3               = /* 'smp3' */ 0x736D7033,
    bmdSwitcherStingerTransitionSourceMediaPlayer4               = /* 'smp4' */ 0x736D7034,
    bmdSwitcherStingerTransitionSourceNone                       = /* 'snon' */ 0x736E6F6E
} BMDSwitcherStingerTransitionSource;

/* Enum BMDSwitcherMediaPlayerSourceType - Source for a Media Player */

typedef [v1_enum] enum	_BMDSwitcherMediaPlayerSourceType {
    bmdSwitcherMediaPlayerSourceTypeStill                        = /* 'smps' */ 0x736D7073,
    bmdSwitcherMediaPlayerSourceTypeClip                         = /* 'smpc' */ 0x736D7063
} BMDSwitcherMediaPlayerSourceType;

/* Enum BMDSwitcherMultiViewLayout - Layout for MultiView */

typedef [v1_enum] enum	_BMDSwitcherMultiViewLayout {
    bmdSwitcherMultiViewLayoutProgramTop                         = /* 'mvpt' */ 0x6D767074,
    bmdSwitcherMultiViewLayoutProgramBottom                      = /* 'mvpb' */ 0x6D767062,
    bmdSwitcherMultiViewLayoutProgramLeft                        = /* 'mvpl' */ 0x6D76706C,
    bmdSwitcherMultiViewLayoutProgramRight                       = /* 'mvpr' */ 0x6D767072
} BMDSwitcherMultiViewLayout;

/* Enum BMDSwitcherMultiViewEventType - Used in IBMDSwitcherMultiViewCallback */

typedef [v1_enum] enum	_BMDSwitcherMultiViewEventType {
    bmdSwitcherMultiViewEventTypeLayoutChanged                   = /* 'lotC' */ 0x6C6F7443,
    bmdSwitcherMultiViewEventTypeWindowChanged                   = /* 'wdwC' */ 0x77647743
} BMDSwitcherMultiViewEventType;

/* Enum BMDSwitcherDownstreamKeyEventType - Used in IBMDSwitcherDownstreamKeyCallback */

typedef [v1_enum] enum	_BMDSwitcherDownstreamKeyEventType {
    bmdSwitcherDownstreamKeyEventTypeInputCutChanged             = /* 'ipcC' */ 0x69706343,
    bmdSwitcherDownstreamKeyEventTypeInputFillChanged            = /* 'ipfC' */ 0x69706643,
    bmdSwitcherDownstreamKeyEventTypeTieChanged                  = /* 'tieC' */ 0x74696543,
    bmdSwitcherDownstreamKeyEventTypeRateChanged                 = /* 'rteC' */ 0x72746543,
    bmdSwitcherDownstreamKeyEventTypeOnAirChanged                = /* 'onaC' */ 0x6F6E6143,
    bmdSwitcherDownstreamKeyEventTypeIsTransitioningChanged      = /* 'itsC' */ 0x69747343,
    bmdSwitcherDownstreamKeyEventTypeIsAutoTransitioningChanged  = /* 'iatC' */ 0x69617443,
    bmdSwitcherDownstreamKeyEventTypeFramesRemainingChanged      = /* 'frmC' */ 0x66726D43,
    bmdSwitcherDownstreamKeyEventTypePreMultipliedChanged        = /* 'pmlC' */ 0x706D6C43,
    bmdSwitcherDownstreamKeyEventTypeClipChanged                 = /* 'clpC' */ 0x636C7043,
    bmdSwitcherDownstreamKeyEventTypeGainChanged                 = /* 'gneC' */ 0x676E6543,
    bmdSwitcherDownstreamKeyEventTypeInverseChanged              = /* 'invC' */ 0x696E7643,
    bmdSwitcherDownstreamKeyEventTypeMaskedChanged               = /* 'mskC' */ 0x6D736B43,
    bmdSwitcherDownstreamKeyEventTypeMaskTopChanged              = /* 'mktC' */ 0x6D6B7443,
    bmdSwitcherDownstreamKeyEventTypeMaskBottomChanged           = /* 'mkbC' */ 0x6D6B6243,
    bmdSwitcherDownstreamKeyEventTypeMaskLeftChanged             = /* 'mklC' */ 0x6D6B6C43,
    bmdSwitcherDownstreamKeyEventTypeMaskRightChanged            = /* 'mkrC' */ 0x6D6B7243
} BMDSwitcherDownstreamKeyEventType;

/* Enum BMDSwitcherConnectToFailure - used in ConnectTo */

typedef [v1_enum] enum	_BMDSwitcherConnectToFailure {
    bmdSwitcherConnectToFailureNoResponse                        = /* 'cfnr' */ 0x63666E72,
    bmdSwitcherConnectToFailureIncompatibleFirmware              = /* 'cfif' */ 0x63666966,
    bmdSwitcherConnectToFailureCorruptData                       = /* 'cfcd' */ 0x63666364,
    bmdSwitcherConnectToFailureStateSync                         = /* 'cfss' */ 0x63667373,
    bmdSwitcherConnectToFailureStateSyncTimedOut                 = /* 'cfst' */ 0x63667374
} BMDSwitcherConnectToFailure;

/* Enum BMDSwitcherMediaPoolEventType - Used in IBMDSwitcherClipCallback, IBMDSwitcherStillsCallback */

typedef [v1_enum] enum	_BMDSwitcherMediaPoolEventType {
    bmdSwitcherMediaPoolEventTypeValidChanged                    = /* 'vlid' */ 0x766C6964,
    bmdSwitcherMediaPoolEventTypeNameChanged                     = /* 'name' */ 0x6E616D65,
    bmdSwitcherMediaPoolEventTypeHashChanged                     = /* 'hash' */ 0x68617368,
    bmdSwitcherMediaPoolEventTypeAudioValidChanged               = /* 'avld' */ 0x61766C64,
    bmdSwitcherMediaPoolEventTypeAudioNameChanged                = /* 'anme' */ 0x616E6D65,
    bmdSwitcherMediaPoolEventTypeAudioHashChanged                = /* 'ahsh' */ 0x61687368,
    bmdSwitcherMediaPoolEventTypeLockBusy                        = /* 'lbsy' */ 0x6C627379,
    bmdSwitcherMediaPoolEventTypeLockIdle                        = /* 'lidl' */ 0x6C69646C,
    bmdSwitcherMediaPoolEventTypeTransferCompleted               = /* 'cmpt' */ 0x636D7074,
    bmdSwitcherMediaPoolEventTypeTransferCancelled               = /* 'cncl' */ 0x636E636C,
    bmdSwitcherMediaPoolEventTypeTransferFailed                  = /* 'fail' */ 0x6661696C
} BMDSwitcherMediaPoolEventType;

/* Enum BMDSwitcherCameraControlEventType - Used in IBMDSwitcherCameraControlCallback */

typedef [v1_enum] enum	_BMDSwitcherCameraControlEventType {
    bmdSwitcherCameraControlEventTypePeriodicFlushIntervalChanged = /* 'pfic' */ 0x70666963,
    bmdSwitcherCameraControlEventTypeParameterValueChanged       = /* 'pmvc' */ 0x706D7663,
    bmdSwitcherCameraControlEventTypeParameterPeriodicFlushEnabledChanged = /* 'pmpc' */ 0x706D7063
} BMDSwitcherCameraControlEventType;

/* Enum BMDSwitcherCameraControlParameterType - Used in IBMDSwitcherCameraControl */

typedef [v1_enum] enum	_BMDSwitcherCameraControlParameterType {
    bmdSwitcherCameraControlParameterTypeVoidBool                = /* 'ccvb' */ 0x63637662,
    bmdSwitcherCameraControlParameterTypeSigned8Bit              = /* 'ccs8' */ 0x63637338,
    bmdSwitcherCameraControlParameterTypeSigned16Bit             = /* 'ccs1' */ 0x63637331,
    bmdSwitcherCameraControlParameterTypeSigned32Bit             = /* 'ccs3' */ 0x63637333,
    bmdSwitcherCameraControlParameterTypeSigned64Bit             = /* 'ccs6' */ 0x63637336,
    bmdSwitcherCameraControlParameterTypeFixedPoint16Bit         = /* 'ccfp' */ 0x63636670
} BMDSwitcherCameraControlParameterType;

/* Enum BMDSwitcherMacroPoolEventType - Used in IBMDSwitcherMacroPoolCallback */

typedef [v1_enum] enum	_BMDSwitcherMacroPoolEventType {
    bmdSwitcherMacroPoolEventTypeValidChanged                    = /* 'mava' */ 0x6D617661,
    bmdSwitcherMacroPoolEventTypeHasUnsupportedOpsChanged        = /* 'maop' */ 0x6D616F70,
    bmdSwitcherMacroPoolEventTypeNameChanged                     = /* 'mana' */ 0x6D616E61,
    bmdSwitcherMacroPoolEventTypeDescriptionChanged              = /* 'made' */ 0x6D616465,
    bmdSwitcherMacroPoolEventTypeTransferCompleted               = /* 'mats' */ 0x6D617473,
    bmdSwitcherMacroPoolEventTypeTransferCancelled               = /* 'matc' */ 0x6D617463,
    bmdSwitcherMacroPoolEventTypeTransferFailed                  = /* 'matf' */ 0x6D617466
} BMDSwitcherMacroPoolEventType;

/* Enum BMDSwitcherMacroControlEventType - Used in IBMDSwitcherMacroControlCallback */

typedef [v1_enum] enum	_BMDSwitcherMacroControlEventType {
    bmdSwitcherMacroControlEventTypeRunStatusChanged             = /* 'marn' */ 0x6D61726E,
    bmdSwitcherMacroControlEventTypeRecordStatusChanged          = /* 'marc' */ 0x6D617263
} BMDSwitcherMacroControlEventType;

/* Enum BMDSwitcherMacroRunStatus - Used in IBMDSwitcherMacroControl */

typedef [v1_enum] enum	_BMDSwitcherMacroRunStatus {
    bmdSwitcherMacroRunStatusIdle                                = 0x00,
    bmdSwitcherMacroRunStatusRunning                             = 0x01,
    bmdSwitcherMacroRunStatusWaitingForUser                      = 0x02
} BMDSwitcherMacroRunStatus;

/* Enum BMDSwitcherMacroRecordStatus - Used in IBMDSwitcherMacroControl */

typedef [v1_enum] enum	_BMDSwitcherMacroRecordStatus {
    bmdSwitcherMacroRecordStatusIdle                             = 0x00,
    bmdSwitcherMacroRecordStatusRecording                        = 0x01
} BMDSwitcherMacroRecordStatus;

// Forward Declarations

interface IBMDSwitcherAudioMonitorOutputCallback;
interface IBMDSwitcherAudioMonitorOutput;
interface IBMDSwitcherAudioInputCallback;
interface IBMDSwitcherAudioInput;
interface IBMDSwitcherAudioMixerCallback;
interface IBMDSwitcherAudioMixer;
interface IBMDSwitcherKeyLumaParametersCallback;
interface IBMDSwitcherKeyLumaParameters;
interface IBMDSwitcherKeyChromaParametersCallback;
interface IBMDSwitcherKeyChromaParameters;
interface IBMDSwitcherKeyPatternParametersCallback;
interface IBMDSwitcherKeyPatternParameters;
interface IBMDSwitcherKeyFlyKeyFrameParametersCallback;
interface IBMDSwitcherKeyFlyKeyFrameParameters;
interface IBMDSwitcherKeyFlyParametersCallback;
interface IBMDSwitcherKeyFlyParameters;
interface IBMDSwitcherKeyDVEParametersCallback;
interface IBMDSwitcherKeyDVEParameters;
interface IBMDSwitcherKeyCallback;
interface IBMDSwitcherKey;
interface IBMDSwitcherMediaPlayerCallback;
interface IBMDSwitcherMediaPlayer;
interface IBMDSwitcherTransitionMixParametersCallback;
interface IBMDSwitcherTransitionMixParameters;
interface IBMDSwitcherTransitionDipParametersCallback;
interface IBMDSwitcherTransitionDipParameters;
interface IBMDSwitcherTransitionWipeParametersCallback;
interface IBMDSwitcherTransitionWipeParameters;
interface IBMDSwitcherTransitionDVEParametersCallback;
interface IBMDSwitcherTransitionDVEParameters;
interface IBMDSwitcherTransitionStingerParametersCallback;
interface IBMDSwitcherTransitionStingerParameters;
interface IBMDSwitcherTransitionParametersCallback;
interface IBMDSwitcherTransitionParameters;
interface IBMDSwitcherMixEffectBlockCallback;
interface IBMDSwitcherMixEffectBlock;
interface IBMDSwitcherInputCallback;
interface IBMDSwitcherInput;
interface IBMDSwitcherInputColorCallback;
interface IBMDSwitcherInputColor;
interface IBMDSwitcherInputAuxCallback;
interface IBMDSwitcherInputAux;
interface IBMDSwitcherSuperSourceBoxCallback;
interface IBMDSwitcherSuperSourceBox;
interface IBMDSwitcherInputSuperSourceCallback;
interface IBMDSwitcherInputSuperSource;
interface IBMDSwitcherMultiViewCallback;
interface IBMDSwitcherMultiView;
interface IBMDSwitcherDownstreamKeyCallback;
interface IBMDSwitcherDownstreamKey;
interface IBMDSwitcherInputIterator;
interface IBMDSwitcherSuperSourceBoxIterator;
interface IBMDSwitcherMixEffectBlockIterator;
interface IBMDSwitcherDownstreamKeyIterator;
interface IBMDSwitcherKeyIterator;
interface IBMDSwitcherMediaPlayerIterator;
interface IBMDSwitcherMultiViewIterator;
interface IBMDSwitcherAudioMonitorOutputIterator;
interface IBMDSwitcherAudioInputIterator;
interface IBMDSwitcherCallback;
interface IBMDSwitcher;
interface IBMDSwitcherDiscovery;
interface IBMDSwitcherFrame;
interface IBMDSwitcherAudio;
interface IBMDSwitcherLockCallback;
interface IBMDSwitcherStillsCallback;
interface IBMDSwitcherStills;
interface IBMDSwitcherClipCallback;
interface IBMDSwitcherClip;
interface IBMDSwitcherMediaPoolCallback;
interface IBMDSwitcherMediaPool;
interface IBMDSwitcherCameraControlParameterIterator;
interface IBMDSwitcherCameraControlCallback;
interface IBMDSwitcherCameraControl;
interface IBMDSwitcherMacro;
interface IBMDSwitcherTransferMacro;
interface IBMDSwitcherMacroPoolCallback;
interface IBMDSwitcherMacroPool;
interface IBMDSwitcherMacroControlCallback;
interface IBMDSwitcherMacroControl;

/* Interface IBMDSwitcherAudioMonitorOutputCallback - Audio Monitor Output Object Callback */

[
    object,
    uuid(CB5EFB16-0474-4FAA-B071-17FA0DADD19F),
    helpstring("Audio Monitor Output Object Callback")
] interface IBMDSwitcherAudioMonitorOutputCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherAudioMonitorOutputEventType eventType);
    HRESULT LevelNotification([in] double left, [in] double right, [in] double peakLeft, [in] double peakRight);
};

/* Interface IBMDSwitcherAudioMonitorOutput - Audio Monitor Output Object */

[
    object,
    uuid(21E041C3-6C69-4A95-A6CC-AE7A57257407),
    helpstring("Audio Monitor Output Object")
] interface IBMDSwitcherAudioMonitorOutput : IUnknown
{
    HRESULT GetMonitorEnable([out] BOOL* enable);
    HRESULT SetMonitorEnable([in] BOOL enable); // When set to false, this output mirrors the output of Program Out and Monitor Functionality is disabled
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetMute([out] BOOL* mute);
    HRESULT SetMute([in] BOOL mute);
    HRESULT GetSolo([out] BOOL* solo);
    HRESULT SetSolo([in] BOOL solo);
    HRESULT GetSoloInput([out] BMDSwitcherAudioInputId* audioInput);
    HRESULT SetSoloInput([in] BMDSwitcherAudioInputId audioInput);
    HRESULT GetDim([out] BOOL* dim);
    HRESULT SetDim([in] BOOL dim);
    HRESULT GetDimLevel([out] double* gain);
    HRESULT SetDimLevel([in] double gain);
    HRESULT ResetLevelNotificationPeaks(void);
    HRESULT AddCallback([in] IBMDSwitcherAudioMonitorOutputCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherAudioMonitorOutputCallback* callback);
};

/* Interface IBMDSwitcherAudioInputCallback - Audio Input Object Callback */

[
    object,
    uuid(26E05D77-EFB9-4253-86D8-2F1E82E462F6),
    helpstring("Audio Input Object Callback")
] interface IBMDSwitcherAudioInputCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherAudioInputEventType eventType);
    HRESULT LevelNotification([in] double left, [in] double right, [in] double peakLeft, [in] double peakRight);
};

/* Interface IBMDSwitcherAudioInput - Audio Input Object */

[
    object,
    uuid(321EA41E-544B-491B-B9AA-F6FCAECEF74F),
    helpstring("Audio Input Object")
] interface IBMDSwitcherAudioInput : IUnknown
{
    HRESULT GetType([out] BMDSwitcherAudioInputType* type);
    HRESULT GetCurrentExternalPortType([out] BMDSwitcherExternalPortType* type);
    HRESULT GetMixOption([out] BMDSwitcherAudioMixOption* mixOption);
    HRESULT SetMixOption([in] BMDSwitcherAudioMixOption mixOption);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetBalance([out] double* balance);
    HRESULT SetBalance([in] double balance);
    HRESULT IsMixedIn([out] BOOL* mixedIn);
    HRESULT GetAudioInputId([out] BMDSwitcherAudioInputId* audioInputId);
    HRESULT ResetLevelNotificationPeaks(void);
    HRESULT AddCallback([in] IBMDSwitcherAudioInputCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherAudioInputCallback* callback);
};

/* Interface IBMDSwitcherAudioMixerCallback - Audio Mixer Object Callback */

[
    object,
    uuid(A203DA24-9910-450C-AA6A-9AA05C5C856E),
    helpstring("Audio Mixer Object Callback")
] interface IBMDSwitcherAudioMixerCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherAudioMixerEventType eventType);
    HRESULT ProgramOutLevelNotification([in] double left, [in] double right, [in] double peakLeft, [in] double peakRight);
};

/* Interface IBMDSwitcherAudioMixer - Audio Mixer Object */

[
    object,
    uuid(CD3AD708-6F82-41EB-B8B2-64605D4040F2),
    helpstring("Audio Mixer Object")
] interface IBMDSwitcherAudioMixer : IUnknown
{
    HRESULT GetProgramOutGain([out] double* gain);
    HRESULT SetProgramOutGain([in] double gain);
    HRESULT GetProgramOutBalance([out] double* balance /* [-1.00, 1.00] */);
    HRESULT SetProgramOutBalance([in] double balance /* [-1.00, 1.00] */);
    HRESULT GetProgramOutFollowFadeToBlack([out] BOOL* follow);
    HRESULT SetProgramOutFollowFadeToBlack([in] BOOL follow);
    HRESULT SetAllLevelNotificationsEnable([in] BOOL enable);
    HRESULT ResetProgramOutLevelNotificationPeaks(void);
    HRESULT ResetAllLevelNotificationPeaks(void);
    HRESULT AddCallback([in] IBMDSwitcherAudioMixerCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherAudioMixerCallback* callback);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
};

/* Interface IBMDSwitcherKeyLumaParametersCallback - Luma Key Parameters Callback */

[
    object,
    uuid(AB31E347-5177-4595-8E52-650BF9B08B7F),
    helpstring("Luma Key Parameters Callback")
] interface IBMDSwitcherKeyLumaParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherKeyLumaParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyLumaParameters - Luma Key Parameters */

[
    object,
    uuid(EE88B575-6044-4372-B1D6-9733AF342DCA),
    helpstring("Luma Key Parameters")
] interface IBMDSwitcherKeyLumaParameters : IUnknown
{
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT AddCallback([in] IBMDSwitcherKeyLumaParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyLumaParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyChromaParametersCallback - Chroma Key Parameters Callback */

[
    object,
    uuid(FE3F97EC-5F2D-4E47-AA7A-38962F9CB3CE),
    helpstring("Chroma Key Parameters Callback")
] interface IBMDSwitcherKeyChromaParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherKeyChromaParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyChromaParameters - Chroma Key Parameters */

[
    object,
    uuid(07658026-6AE3-4694-B814-2AB7EBBE7D1C),
    helpstring("Chroma Key Parameters")
] interface IBMDSwitcherKeyChromaParameters : IUnknown
{
    HRESULT GetHue([out] double* hue); // [0, 360)
    HRESULT SetHue([in] double hue); // [0, 360)
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetYSuppress([out] double* ySuppress);
    HRESULT SetYSuppress([in] double ySuppress);
    HRESULT GetLift([out] double* lift);
    HRESULT SetLift([in] double lift);
    HRESULT GetNarrow([out] BOOL* narrow);
    HRESULT SetNarrow([in] BOOL narrow);
    HRESULT AddCallback([in] IBMDSwitcherKeyChromaParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyChromaParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyPatternParametersCallback - Pattern Key Parameters Callback */

[
    object,
    uuid(FBF24499-06EB-4C54-BE92-21C403C1093C),
    helpstring("Pattern Key Parameters Callback")
] interface IBMDSwitcherKeyPatternParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherKeyPatternParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyPatternParameters - Pattern Key Parameters */

[
    object,
    uuid(267EDB96-5921-4BA5-88BA-C83123E153D2),
    helpstring("Pattern Key Parameters")
] interface IBMDSwitcherKeyPatternParameters : IUnknown
{
    HRESULT GetPattern([out] BMDSwitcherPatternStyle* pattern);
    HRESULT SetPattern([in] BMDSwitcherPatternStyle pattern);
    HRESULT GetSize([out] double* size);
    HRESULT SetSize([in] double size);
    HRESULT GetSymmetry([out] double* symmetry);
    HRESULT SetSymmetry([in] double symmetry);
    HRESULT GetSoftness([out] double* softness);
    HRESULT SetSoftness([in] double softness);
    HRESULT GetHorizontalOffset([out] double* hOffset);
    HRESULT SetHorizontalOffset([in] double hOffset);
    HRESULT GetVerticalOffset([out] double* vOffset);
    HRESULT SetVerticalOffset([in] double vOffset);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT AddCallback([in] IBMDSwitcherKeyPatternParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyPatternParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyFlyKeyFrameParametersCallback - Key Fly Frame Parameters Callback */

[
    object,
    uuid(136BDD85-690B-4691-BA1D-AB8A61F97AE0),
    helpstring("Key Fly Frame Parameters Callback")
] interface IBMDSwitcherKeyFlyKeyFrameParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherKeyFlyKeyFrameParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyFlyKeyFrameParameters - Key Fly Frame Parameters */

[
    object,
    uuid(A6B8530A-B0C3-4304-8172-6D5ED93989B1),
    helpstring("Key Fly Frame Parameters")
] interface IBMDSwitcherKeyFlyKeyFrameParameters : IUnknown
{
    HRESULT GetSizeX([out] double* multiplierX);
    HRESULT SetSizeX([in] double multiplierX);
    HRESULT GetSizeY([out] double* multiplierY);
    HRESULT SetSizeY([in] double multiplierY);
    HRESULT GetPositionX([out] double* offsetX);
    HRESULT SetPositionX([in] double offsetX);
    HRESULT GetPositionY([out] double* offsetY);
    HRESULT SetPositionY([in] double offsetY);
    HRESULT GetRotation([out] double* degrees);
    HRESULT SetRotation([in] double degrees);
    HRESULT GetBorderWidthOut([out] double* widthOut);
    HRESULT SetBorderWidthOut([in] double widthOut);
    HRESULT GetBorderWidthIn([out] double* widthIn);
    HRESULT SetBorderWidthIn([in] double widthIn);
    HRESULT GetBorderSoftnessOut([out] double* softOut);
    HRESULT SetBorderSoftnessOut([in] double softOut);
    HRESULT GetBorderSoftnessIn([out] double* softIn);
    HRESULT SetBorderSoftnessIn([in] double softIn);
    HRESULT GetBorderBevelSoftness([out] double* bevelSoft);
    HRESULT SetBorderBevelSoftness([in] double bevelSoft);
    HRESULT GetBorderBevelPosition([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition([in] double bevelPosition);
    HRESULT GetBorderOpacity([out] double* opacity);
    HRESULT SetBorderOpacity([in] double opacity);
    HRESULT GetBorderHue([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation([out] double* sat);
    HRESULT SetBorderSaturation([in] double sat);
    HRESULT GetBorderLuma([out] double* luma);
    HRESULT SetBorderLuma([in] double luma);
    HRESULT GetBorderLightSourceDirection([out] double* degrees /* [0, 360) */);
    HRESULT SetBorderLightSourceDirection([in] double degrees /* [0, 360) */);
    HRESULT GetBorderLightSourceAltitude([out] double* altitude);
    HRESULT SetBorderLightSourceAltitude([in] double altitude);
    HRESULT GetMaskTop([out] double* top);
    HRESULT SetMaskTop([in] double top);
    HRESULT GetMaskBottom([out] double* bottom);
    HRESULT SetMaskBottom([in] double bottom);
    HRESULT GetMaskLeft([out] double* left);
    HRESULT SetMaskLeft([in] double left);
    HRESULT GetMaskRight([out] double* right);
    HRESULT SetMaskRight([in] double right);
    HRESULT AddCallback([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyFlyParametersCallback - Key Fly Parameters Callback */

[
    object,
    uuid(A9D6543D-0447-4048-B5AD-806622B9BF1A),
    helpstring("Key Fly Parameters Callback")
] interface IBMDSwitcherKeyFlyParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherKeyFlyParametersEventType eventType, [in] BMDSwitcherFlyKeyFrame keyFrame /* Only used when eventType is bmdSwitcherFlyParametersEventTypeIsKeyFrameStoredChanged */);
};

/* Interface IBMDSwitcherKeyFlyParameters - Key Fly Parameters */

[
    object,
    uuid(BB1D2964-F55B-491E-9C5D-8E43304C34FD),
    helpstring("Key Fly Parameters")
] interface IBMDSwitcherKeyFlyParameters : IUnknown
{
    HRESULT GetFly([out] BOOL* isFlyKey);
    HRESULT SetFly([in] BOOL isFlyKey);
    HRESULT GetCanFly([out] BOOL* canFly);
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetSizeX([out] double* multiplierX);
    HRESULT SetSizeX([in] double multiplierX);
    HRESULT GetSizeY([out] double* multiplierY);
    HRESULT SetSizeY([in] double multiplierY);
    HRESULT GetPositionX([out] double* offsetX);
    HRESULT SetPositionX([in] double offsetX);
    HRESULT GetPositionY([out] double* offsetY);
    HRESULT SetPositionY([in] double offsetY);
    HRESULT GetRotation([out] double* degrees);
    HRESULT SetRotation([in] double degrees);
    HRESULT ResetRotation(void);
    HRESULT ResetDVE(void); // Resets all DVE parameters, excluding mask
    HRESULT ResetDVEFull(void); // Resets all DVE parameters to full screen, excluding mask
    HRESULT IsKeyFrameStored([in] BMDSwitcherFlyKeyFrame keyFrame, [out] BOOL* stored);
    HRESULT StoreAsKeyFrame([in] BMDSwitcherFlyKeyFrame keyFrame); // Stores current state into the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT ClearKeyFrame([in] BMDSwitcherFlyKeyFrame keyFrame); // Clears the specified Key Frame(s), only Key Frame A and/or B can be specified.
    HRESULT RunToKeyFrame([in] BMDSwitcherFlyKeyFrame destination); // Can only specify 1 Key Frame destination
    HRESULT IsAtKeyFrames([out] BMDSwitcherFlyKeyFrame* keyFrames);
    HRESULT GetKeyFrameParameters([in] BMDSwitcherFlyKeyFrame keyFrame, [out] IBMDSwitcherKeyFlyKeyFrameParameters** keyFrameParameters);
    HRESULT IsRunning([out] BOOL* isRunning, [out] BMDSwitcherFlyKeyFrame* destination);
    HRESULT AddCallback([in] IBMDSwitcherKeyFlyParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyFlyParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyDVEParametersCallback - DVE Key Parameters Callback */

[
    object,
    uuid(E437655F-32BB-4652-BA77-4083B435566A),
    helpstring("DVE Key Parameters Callback")
] interface IBMDSwitcherKeyDVEParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherKeyDVEParametersEventType eventType);
};

/* Interface IBMDSwitcherKeyDVEParameters - DVE Key Parameters */

[
    object,
    uuid(92AA5433-70FB-423D-9435-646D171C9D82),
    helpstring("DVE Key Parameters")
] interface IBMDSwitcherKeyDVEParameters : IUnknown
{
    HRESULT GetShadow([out] BOOL* shadowOn);
    HRESULT SetShadow([in] BOOL shadowOn);
    HRESULT GetLightSourceDirection([out] double* degrees /* [0, 360) */);
    HRESULT SetLightSourceDirection([in] double degrees /* [0, 360) */);
    HRESULT GetLightSourceAltitude([out] double* altitude);
    HRESULT SetLightSourceAltitude([in] double altitude);
    HRESULT GetBorderEnabled([out] BOOL* on);
    HRESULT SetBorderEnabled([in] BOOL on);
    HRESULT GetBorderBevel([out] BMDSwitcherBorderBevelOption* bevelOption);
    HRESULT SetBorderBevel([in] BMDSwitcherBorderBevelOption bevelOption);
    HRESULT GetBorderWidthIn([out] double* widthIn);
    HRESULT SetBorderWidthIn([in] double widthIn);
    HRESULT GetBorderWidthOut([out] double* widthOut);
    HRESULT SetBorderWidthOut([in] double widthOut);
    HRESULT GetBorderSoftnessIn([out] double* softIn);
    HRESULT SetBorderSoftnessIn([in] double softIn);
    HRESULT GetBorderSoftnessOut([out] double* softOut);
    HRESULT SetBorderSoftnessOut([in] double softOut);
    HRESULT GetBorderBevelSoftness([out] double* bevelSoft);
    HRESULT SetBorderBevelSoftness([in] double bevelSoft);
    HRESULT GetBorderBevelPosition([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition([in] double bevelPosition);
    HRESULT GetBorderOpacity([out] double* opacity);
    HRESULT SetBorderOpacity([in] double opacity);
    HRESULT GetBorderHue([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation([out] double* sat);
    HRESULT SetBorderSaturation([in] double sat);
    HRESULT GetBorderLuma([out] double* luma);
    HRESULT SetBorderLuma([in] double luma);
    HRESULT GetMasked([out] BOOL* maskEnabled);
    HRESULT SetMasked([in] BOOL maskEnabled);
    HRESULT GetMaskTop([out] double* top);
    HRESULT SetMaskTop([in] double top);
    HRESULT GetMaskBottom([out] double* bottom);
    HRESULT SetMaskBottom([in] double bottom);
    HRESULT GetMaskLeft([out] double* left);
    HRESULT SetMaskLeft([in] double left);
    HRESULT GetMaskRight([out] double* right);
    HRESULT SetMaskRight([in] double right);
    HRESULT ResetMask(void);
    HRESULT AddCallback([in] IBMDSwitcherKeyDVEParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyDVEParametersCallback* callback);
};

/* Interface IBMDSwitcherKeyCallback - Key Object Callback */

[
    object,
    uuid(1972E4DF-1D5F-4C4E-A79B-E5A6E8CE1511),
    helpstring("Key Object Callback")
] interface IBMDSwitcherKeyCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherKeyEventType eventType);
};

/* Interface IBMDSwitcherKey - Key Object */

[
    object,
    uuid(A41B54B5-0D52-44D5-ACE5-9B94B0AF2A0B),
    helpstring("Key Object")
] interface IBMDSwitcherKey : IUnknown
{
    HRESULT GetType([out] BMDSwitcherKeyType* type);
    HRESULT SetType([in] BMDSwitcherKeyType type);
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetCutInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetFillInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetOnAir([out] BOOL* onAir);
    HRESULT SetOnAir([in] BOOL onAir);
    HRESULT CanBeDVEKey([out] BOOL* canDVE);
    HRESULT GetMasked([out] BOOL* maskEnabled);
    HRESULT SetMasked([in] BOOL maskEnabled);
    HRESULT GetMaskTop([out] double* top);
    HRESULT SetMaskTop([in] double top);
    HRESULT GetMaskBottom([out] double* bottom);
    HRESULT SetMaskBottom([in] double bottom);
    HRESULT GetMaskLeft([out] double* left);
    HRESULT SetMaskLeft([in] double left);
    HRESULT GetMaskRight([out] double* right);
    HRESULT SetMaskRight([in] double right);
    HRESULT ResetMask(void);
    HRESULT GetTransitionSelectionMask([out] BMDSwitcherTransitionSelection* selectionMask);
    HRESULT AddCallback([in] IBMDSwitcherKeyCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherKeyCallback* callback);
};

/* Interface IBMDSwitcherMediaPlayerCallback - Media Player Callback */

[
    object,
    uuid(3A82C121-18FA-469E-AE9A-73255356CA5B),
    helpstring("Media Player Callback")
] interface IBMDSwitcherMediaPlayerCallback : IUnknown
{
    HRESULT SourceChanged(void);
    HRESULT PlayingChanged(void);
    HRESULT LoopChanged(void);
    HRESULT AtBeginningChanged(void);
    HRESULT ClipFrameChanged(void);
};

/* Interface IBMDSwitcherMediaPlayer - Media Player */

[
    object,
    uuid(B5240E1F-CE0A-4C38-9FAB-D7FAC227205A),
    helpstring("Media Player")
] interface IBMDSwitcherMediaPlayer : IUnknown
{
    HRESULT GetSource([out] BMDSwitcherMediaPlayerSourceType* type, [out] unsigned int* index);
    HRESULT SetSource([in] BMDSwitcherMediaPlayerSourceType type, [in] unsigned int index);
    HRESULT GetPlaying([out] BOOL* playing);
    HRESULT SetPlaying([in] BOOL playing);
    HRESULT GetLoop([out] BOOL* loop);
    HRESULT SetLoop([in] BOOL loop);
    HRESULT GetAtBeginning([out] BOOL* atBegining);
    HRESULT SetAtBeginning(void);
    HRESULT GetClipFrame([out] unsigned int* clipFrameIndex);
    HRESULT SetClipFrame([in] unsigned int clipFrameIndex);
    HRESULT AddCallback([in] IBMDSwitcherMediaPlayerCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMediaPlayerCallback* callback);
};

/* Interface IBMDSwitcherTransitionMixParametersCallback - Transition Mix Parameters Callback */

[
    object,
    uuid(FE9730BB-F60B-46DF-B182-2992FFC884DE),
    helpstring("Transition Mix Parameters Callback")
] interface IBMDSwitcherTransitionMixParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherTransitionMixParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionMixParameters - Transition Mix Parameters */

[
    object,
    uuid(4C5D18C9-0955-4525-9947-527EA0679140),
    helpstring("Transition Mix Parameters")
] interface IBMDSwitcherTransitionMixParameters : IUnknown
{
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT AddCallback([in] IBMDSwitcherTransitionMixParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionMixParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionDipParametersCallback - Transition Dip Parameters Callback */

[
    object,
    uuid(410BE711-DB1A-48D1-93E7-382A0B1781B5),
    helpstring("Transition Dip Parameters Callback")
] interface IBMDSwitcherTransitionDipParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherTransitionDipParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionDipParameters - Transition Dip Parameters */

[
    object,
    uuid(DACC2FF3-6B54-4459-AAA6-2B1EA2D6887A),
    helpstring("Transition Dip Parameters")
] interface IBMDSwitcherTransitionDipParameters : IUnknown
{
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetInputDip([out] BMDSwitcherInputId* input);
    HRESULT SetInputDip([in] BMDSwitcherInputId input);
    HRESULT AddCallback([in] IBMDSwitcherTransitionDipParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionDipParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionWipeParametersCallback - Transition Wipe Parameters Callback */

[
    object,
    uuid(0FC4E095-DF7A-4128-933A-AAE4B7FD6119),
    helpstring("Transition Wipe Parameters Callback")
] interface IBMDSwitcherTransitionWipeParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherTransitionWipeParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionWipeParameters - Transition Wipe Parameters */

[
    object,
    uuid(FAC84D37-11A2-4152-8E5E-D9EB0DC48619),
    helpstring("Transition Wipe Parameters")
] interface IBMDSwitcherTransitionWipeParameters : IUnknown
{
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetPattern([out] BMDSwitcherPatternStyle* pattern);
    HRESULT SetPattern([in] BMDSwitcherPatternStyle pattern);
    HRESULT GetBorderSize([out] double* size);
    HRESULT SetBorderSize([in] double size);
    HRESULT GetInputBorder([out] BMDSwitcherInputId* input);
    HRESULT SetInputBorder([in] BMDSwitcherInputId input);
    HRESULT GetSymmetry([out] double* symmetry);
    HRESULT SetSymmetry([in] double symmetry);
    HRESULT GetSoftness([out] double* soft);
    HRESULT SetSoftness([in] double soft);
    HRESULT GetHorizontalOffset([out] double* hOffset);
    HRESULT SetHorizontalOffset([in] double hOffset);
    HRESULT GetVerticalOffset([out] double* vOffset);
    HRESULT SetVerticalOffset([in] double vOffset);
    HRESULT GetReverse([out] BOOL* reverse);
    HRESULT SetReverse([in] BOOL reverse);
    HRESULT GetFlipFlop([out] BOOL* flipflop);
    HRESULT SetFlipFlop([in] BOOL flipflop);
    HRESULT AddCallback([in] IBMDSwitcherTransitionWipeParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionWipeParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionDVEParametersCallback - Transition DVE Parameters Callback */

[
    object,
    uuid(6535115F-B64C-4512-BF5A-12969253E2F9),
    helpstring("Transition DVE Parameters Callback")
] interface IBMDSwitcherTransitionDVEParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherTransitionDVEParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionDVEParameters - Transition DVE Parameters */

[
    object,
    uuid(CAA10B02-F7CB-47A6-97DA-C71DEF172712),
    helpstring("Transition DVE Parameters")
] interface IBMDSwitcherTransitionDVEParameters : IUnknown
{
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetLogoRate([out] unsigned int* frames);
    HRESULT SetLogoRate([in] unsigned int frames);
    HRESULT GetReverse([out] BOOL* reverse);
    HRESULT SetReverse([in] BOOL reverse);
    HRESULT GetFlipFlop([out] BOOL* flipflop);
    HRESULT SetFlipFlop([in] BOOL flipflop);
    HRESULT GetStyle([out] BMDSwitcherDVETransitionStyle* style);
    HRESULT SetStyle([in] BMDSwitcherDVETransitionStyle style);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetFillInputAvailabilityMask([in] BMDSwitcherInputAvailability* mask);
    HRESULT GetCutInputAvailabilityMask([in] BMDSwitcherInputAvailability* mask);
    HRESULT GetEnableKey([out] BOOL* enableKey);
    HRESULT SetEnableKey([in] BOOL enableKey);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT AddCallback([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionDVEParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionStingerParametersCallback - Transition Stinger Parameters Callback */

[
    object,
    uuid(9A8B3FB6-DD56-4DFF-AEB3-2C8A26585389),
    helpstring("Transition Stinger Parameters Callback")
] interface IBMDSwitcherTransitionStingerParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherTransitionStingerParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionStingerParameters - Transition Stinger Parameters */

[
    object,
    uuid(0F449A50-4083-49E8-BBF5-C3D95BFA1908),
    helpstring("Transition Stinger Parameters")
] interface IBMDSwitcherTransitionStingerParameters : IUnknown
{
    HRESULT GetSource([out] BMDSwitcherStingerTransitionSource* src);
    HRESULT SetSource([in] BMDSwitcherStingerTransitionSource src);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([out] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT GetPreroll([out] unsigned int* frames);
    HRESULT SetPreroll([in] unsigned int frames);
    HRESULT GetClipDuration([out] unsigned int* frames);
    HRESULT SetClipDuration([in] unsigned int frames);
    HRESULT GetTriggerPoint([out] unsigned int* frames);
    HRESULT SetTriggerPoint([in] unsigned int frames);
    HRESULT GetMixRate([out] unsigned int* frames);
    HRESULT SetMixRate([in] unsigned int frames);
    HRESULT AddCallback([in] IBMDSwitcherTransitionStingerParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionStingerParametersCallback* callback);
};

/* Interface IBMDSwitcherTransitionParametersCallback - Transition Parameters Object Callback */

[
    object,
    uuid(DED1876A-38E3-418E-8044-F3C126C626E7),
    helpstring("Transition Parameters Object Callback")
] interface IBMDSwitcherTransitionParametersCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherTransitionParametersEventType eventType);
};

/* Interface IBMDSwitcherTransitionParameters - Transition Parameters Object */

[
    object,
    uuid(83755CE5-748B-4E49-A856-AC95B8CCD215),
    helpstring("Transition Parameters Object")
] interface IBMDSwitcherTransitionParameters : IUnknown
{
    HRESULT GetTransitionStyle([out] BMDSwitcherTransitionStyle* style);
    HRESULT GetNextTransitionStyle([out] BMDSwitcherTransitionStyle* style);
    HRESULT SetNextTransitionStyle([in] BMDSwitcherTransitionStyle style);
    HRESULT GetTransitionSelection([out] BMDSwitcherTransitionSelection* selection);
    HRESULT SetNextTransitionSelection([in] BMDSwitcherTransitionSelection selection);
    HRESULT GetNextTransitionSelection([out] BMDSwitcherTransitionSelection* selection);
    HRESULT AddCallback([in] IBMDSwitcherTransitionParametersCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherTransitionParametersCallback* callback);
};

/* Interface IBMDSwitcherMixEffectBlockCallback - Mix Effect Block Notification Callback */

[
    object,
    uuid(96010829-2029-4DA3-A34B-70368605ABAA),
    helpstring("Mix Effect Block Notification Callback")
] interface IBMDSwitcherMixEffectBlockCallback : IUnknown
{
    HRESULT PropertyChanged([in] BMDSwitcherMixEffectBlockPropertyId propertyId);
};

/* Interface IBMDSwitcherMixEffectBlock - Mix Effect Block */

[
    object,
    uuid(11974D55-45E0-49D8-AE06-EEF4D5F81DF6),
    helpstring("Mix Effect Block")
] interface IBMDSwitcherMixEffectBlock : IUnknown
{
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback([in] IBMDSwitcherMixEffectBlockCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMixEffectBlockCallback* callback);
    HRESULT SetFlag([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [in] BOOL value);
    HRESULT GetFlag([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [out] BOOL* value);
    HRESULT SetInt([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [in] long long value);
    HRESULT GetInt([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [out] long long* value);
    HRESULT SetFloat([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [in] double value);
    HRESULT GetFloat([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [out] double* value);
    HRESULT SetString([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [in] BSTR value);
    HRESULT GetString([in] BMDSwitcherMixEffectBlockPropertyId propertyId, [out] BSTR* value);
    HRESULT PerformAutoTransition(void);
    HRESULT PerformCut(void);
    HRESULT PerformFadeToBlack(void);
};

/* Interface IBMDSwitcherInputCallback - Switcher Input Object Callback */

[
    object,
    uuid(93054328-C4C8-402D-8899-8E1ED28FAC22),
    helpstring("Switcher Input Object Callback")
] interface IBMDSwitcherInputCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherInputEventType eventType);
};

/* Interface IBMDSwitcherInput - Switcher Input Object */

[
    object,
    uuid(875D3396-6C8A-4FD8-93B7-D1CB655F2AF2),
    helpstring("Switcher Input Object")
] interface IBMDSwitcherInput : IUnknown
{
    HRESULT GetPortType([out] BMDSwitcherPortType* type);
    HRESULT GetInputAvailability([out] BMDSwitcherInputAvailability* availability);
    HRESULT SetShortName([in] BSTR name);
    HRESULT GetShortName([out] BSTR* name);
    HRESULT SetLongName([in] BSTR name);
    HRESULT GetLongName([out] BSTR* name);
    HRESULT ResetNames(void);
    HRESULT IsProgramTallied([out] BOOL* isTallied);
    HRESULT IsPreviewTallied([out] BOOL* isTallied);
    HRESULT GetAvailableExternalPortTypes([out] BMDSwitcherExternalPortType* types);
    HRESULT SetCurrentExternalPortType([in] BMDSwitcherExternalPortType value);
    HRESULT GetCurrentExternalPortType([out] BMDSwitcherExternalPortType* value);
    HRESULT GetInputId([out] BMDSwitcherInputId* inputId);
    HRESULT AddCallback([in] IBMDSwitcherInputCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherInputCallback* callback);
};

/* Interface IBMDSwitcherInputColorCallback - Color Input Object Callback */

[
    object,
    uuid(BAE02C95-9394-439C-BE18-CEF0C0784EC3),
    helpstring("Color Input Object Callback")
] interface IBMDSwitcherInputColorCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherInputColorEventType eventType);
};

/* Interface IBMDSwitcherInputColor - Color Input Object */

[
    object,
    uuid(A0AF18D9-CBE6-49F3-B548-A44E856054D1),
    helpstring("Color Input Object")
] interface IBMDSwitcherInputColor : IUnknown
{
    HRESULT GetHue([out] double* hue);
    HRESULT SetHue([in] double hue);
    HRESULT GetSaturation([out] double* sat);
    HRESULT SetSaturation([in] double sat);
    HRESULT GetLuma([out] double* luma);
    HRESULT SetLuma([in] double luma);
    HRESULT AddCallback([in] IBMDSwitcherInputColorCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherInputColorCallback* callback);
};

/* Interface IBMDSwitcherInputAuxCallback - Aux Input Object Callback */

[
    object,
    uuid(5AD1FF91-143F-49E9-9964-1B9FAF9A712A),
    helpstring("Aux Input Object Callback")
] interface IBMDSwitcherInputAuxCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherInputAuxEventType eventType);
};

/* Interface IBMDSwitcherInputAux - Aux Input Object */

[
    object,
    uuid(52C745A8-89B1-449A-A149-C43F5108DAE7),
    helpstring("Aux Input Object")
] interface IBMDSwitcherInputAux : IUnknown
{
    HRESULT GetInputSource([out] BMDSwitcherInputId* input);
    HRESULT SetInputSource([in] BMDSwitcherInputId input);
    HRESULT GetInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT AddCallback([in] IBMDSwitcherInputAuxCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherInputAuxCallback* callback);
};

/* Interface IBMDSwitcherSuperSourceBoxCallback - SuperSource Box Object Callback */

[
    object,
    uuid(7F667AF6-9B4E-4CDE-9F2F-2DF4505BF877),
    helpstring("SuperSource Box Object Callback")
] interface IBMDSwitcherSuperSourceBoxCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherSuperSourceBoxEventType eventType);
};

/* Interface IBMDSwitcherSuperSourceBox - SuperSource Box Object */

[
    object,
    uuid(137028E5-87B2-407E-846F-283B18C82CE9),
    helpstring("SuperSource Box Object")
] interface IBMDSwitcherSuperSourceBox : IUnknown
{
    HRESULT GetEnabled([out] BOOL* enabled);
    HRESULT SetEnabled([in] BOOL enabled);
    HRESULT GetInputSource([out] BMDSwitcherInputId* input);
    HRESULT SetInputSource([in] BMDSwitcherInputId input);
    HRESULT GetPositionX([out] double* positionX);
    HRESULT SetPositionX([in] double positionX);
    HRESULT GetPositionY([out] double* positionY);
    HRESULT SetPositionY([in] double positionY);
    HRESULT GetSize([out] double* size);
    HRESULT SetSize([in] double size);
    HRESULT GetCropped([out] BOOL* cropped);
    HRESULT SetCropped([in] BOOL cropped);
    HRESULT GetCropTop([out] double* top);
    HRESULT SetCropTop([in] double top);
    HRESULT GetCropBottom([out] double* bottom);
    HRESULT SetCropBottom([in] double bottom);
    HRESULT GetCropLeft([out] double* left);
    HRESULT SetCropLeft([in] double left);
    HRESULT GetCropRight([out] double* right);
    HRESULT SetCropRight([in] double right);
    HRESULT ResetCrop(void);
    HRESULT GetInputAvailabilityMask([in] BMDSwitcherInputAvailability* mask);
    HRESULT AddCallback([in] IBMDSwitcherSuperSourceBoxCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherSuperSourceBoxCallback* callback);
};

/* Interface IBMDSwitcherInputSuperSourceCallback - SuperSource Input Object Callback */

[
    object,
    uuid(6B02A84C-0085-4593-973A-5E458079BD16),
    helpstring("SuperSource Input Object Callback")
] interface IBMDSwitcherInputSuperSourceCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherInputSuperSourceEventType eventType);
};

/* Interface IBMDSwitcherInputSuperSource - SuperSource Input Object */

[
    object,
    uuid(5051EFAA-DFE6-4A9E-9F5D-9356707F1D28),
    helpstring("SuperSource Input Object")
] interface IBMDSwitcherInputSuperSource : IUnknown
{
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetCutInputAvailabilityMask([in] BMDSwitcherInputAvailability* mask);
    HRESULT GetFillInputAvailabilityMask([in] BMDSwitcherInputAvailability* mask);
    HRESULT GetArtOption([out] BMDSwitcherSuperSourceArtOption* artOption);
    HRESULT SetArtOption([in] BMDSwitcherSuperSourceArtOption artOption);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([in] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT GetBorderEnabled([out] BOOL* enabled);
    HRESULT SetBorderEnabled([in] BOOL enabled);
    HRESULT GetBorderBevel([out] BMDSwitcherBorderBevelOption* bevelOption);
    HRESULT SetBorderBevel([in] BMDSwitcherBorderBevelOption bevelOption);
    HRESULT GetBorderWidthOut([out] double* widthOut);
    HRESULT SetBorderWidthOut([in] double widthOut);
    HRESULT GetBorderWidthIn([out] double* widthIn);
    HRESULT SetBorderWidthIn([in] double widthIn);
    HRESULT GetBorderSoftnessOut([out] double* softnessOut);
    HRESULT SetBorderSoftnessOut([in] double softnessOut);
    HRESULT GetBorderSoftnessIn([out] double* softnessIn);
    HRESULT SetBorderSoftnessIn([in] double softnessIn);
    HRESULT GetBorderBevelSoftness([out] double* bevelSoftness);
    HRESULT SetBorderBevelSoftness([in] double bevelSoftness);
    HRESULT GetBorderBevelPosition([out] double* bevelPosition);
    HRESULT SetBorderBevelPosition([in] double bevelPosition);
    HRESULT GetBorderHue([out] double* hue /* [0, 360) */);
    HRESULT SetBorderHue([in] double hue /* [0, 360) */);
    HRESULT GetBorderSaturation([out] double* sat);
    HRESULT SetBorderSaturation([in] double sat);
    HRESULT GetBorderLuma([out] double* luma);
    HRESULT SetBorderLuma([in] double luma);
    HRESULT GetBorderLightSourceDirection([out] double* degrees);
    HRESULT SetBorderLightSourceDirection([in] double degrees);
    HRESULT GetBorderLightSourceAltitude([out] double* altitude);
    HRESULT SetBorderLightSourceAltitude([in] double altitude);
    HRESULT AddCallback([in] IBMDSwitcherInputSuperSourceCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherInputSuperSourceCallback* callback);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
};

/* Interface IBMDSwitcherMultiViewCallback - MultiView Object Callback */

[
    object,
    uuid(345CE414-0BF1-46F9-97AC-FB1A47499005),
    helpstring("MultiView Object Callback")
] interface IBMDSwitcherMultiViewCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherMultiViewEventType eventType, [in] int window);
};

/* Interface IBMDSwitcherMultiView - MultiView Object */

[
    object,
    uuid(231AA55F-EC1D-4FFF-ACE7-3806BA7894BB),
    helpstring("MultiView Object")
] interface IBMDSwitcherMultiView : IUnknown
{
    HRESULT GetLayout([out] BMDSwitcherMultiViewLayout* layout);
    HRESULT SetLayout([in] BMDSwitcherMultiViewLayout layout);
    HRESULT GetWindowInput([in] unsigned int window, [out] BMDSwitcherInputId* input);
    HRESULT SetWindowInput([in] unsigned int window, [in] BMDSwitcherInputId input);
    HRESULT GetWindowCount([out] unsigned int* windowCount);
    HRESULT GetInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT CanRouteInputs([out] BOOL* canRoute);
    HRESULT AddCallback([in] IBMDSwitcherMultiViewCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMultiViewCallback* callback);
};

/* Interface IBMDSwitcherDownstreamKeyCallback - Downstream Key Object Callback */

[
    object,
    uuid(0C7D4DE3-E7D1-4062-86B4-9F82F7BB346D),
    helpstring("Downstream Key Object Callback")
] interface IBMDSwitcherDownstreamKeyCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherDownstreamKeyEventType eventType);
};

/* Interface IBMDSwitcherDownstreamKey - Downstream Key Object */

[
    object,
    uuid(E6E4F204-712C-4D59-848D-926B14BEF353),
    helpstring("Downstream Key Object")
] interface IBMDSwitcherDownstreamKey : IUnknown
{
    HRESULT GetInputCut([out] BMDSwitcherInputId* input);
    HRESULT SetInputCut([in] BMDSwitcherInputId input);
    HRESULT GetInputFill([out] BMDSwitcherInputId* input);
    HRESULT SetInputFill([in] BMDSwitcherInputId input);
    HRESULT GetCutInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetFillInputAvailabilityMask([out] BMDSwitcherInputAvailability* availabilityMask);
    HRESULT GetTie([out] BOOL* tie);
    HRESULT SetTie([in] BOOL tie);
    HRESULT GetRate([out] unsigned int* frames);
    HRESULT SetRate([in] unsigned int frames);
    HRESULT GetOnAir([out] BOOL* onAir);
    HRESULT SetOnAir([in] BOOL onAir);
    HRESULT PerformAutoTransition(void);
    HRESULT IsTransitioning([out] BOOL* isTransitioning);
    HRESULT IsAutoTransitioning([out] BOOL* isAutoTransitioning);
    HRESULT GetFramesRemaining([out] unsigned int* framesRemaining);
    HRESULT GetPreMultiplied([out] BOOL* preMultiplied);
    HRESULT SetPreMultiplied([in] BOOL preMultiplied);
    HRESULT GetClip([out] double* clip);
    HRESULT SetClip([in] double clip);
    HRESULT GetGain([out] double* gain);
    HRESULT SetGain([in] double gain);
    HRESULT GetInverse([in] BOOL* inverse);
    HRESULT SetInverse([in] BOOL inverse);
    HRESULT GetMasked([out] BOOL* maskEnabled);
    HRESULT SetMasked([in] BOOL maskEnabled);
    HRESULT GetMaskTop([out] double* top);
    HRESULT SetMaskTop([in] double top);
    HRESULT GetMaskBottom([out] double* bottom);
    HRESULT SetMaskBottom([in] double bottom);
    HRESULT GetMaskLeft([out] double* left);
    HRESULT SetMaskLeft([in] double left);
    HRESULT GetMaskRight([out] double* right);
    HRESULT SetMaskRight([in] double right);
    HRESULT ResetMask(void);
    HRESULT AddCallback([in] IBMDSwitcherDownstreamKeyCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherDownstreamKeyCallback* callback);
};

/* Interface IBMDSwitcherInputIterator - Input Iterator */

[
    object,
    uuid(F841D36E-2762-4215-A598-FFE76D0FF05C),
    helpstring("Input Iterator")
] interface IBMDSwitcherInputIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherInput** input);
    HRESULT GetById([in] BMDSwitcherInputId inputId, [out] IBMDSwitcherInput** input);
};

/* Interface IBMDSwitcherSuperSourceBoxIterator - SuperSource Box Iterator */

[
    object,
    uuid(96153CDA-C894-42EA-BA90-C387018CC334),
    helpstring("SuperSource Box Iterator")
] interface IBMDSwitcherSuperSourceBoxIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherSuperSourceBox** box);
};

/* Interface IBMDSwitcherMixEffectBlockIterator - Mix Effect Block Iterator */

[
    object,
    uuid(930BDE3B-4A78-43D0-8FD3-6E82ABA0E117),
    helpstring("Mix Effect Block Iterator")
] interface IBMDSwitcherMixEffectBlockIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherMixEffectBlock** mixEffectBlock);
};

/* Interface IBMDSwitcherDownstreamKeyIterator - Downstream Key Iterator */

[
    object,
    uuid(F2968750-709B-42C8-B450-92CA2B065D14),
    helpstring("Downstream Key Iterator")
] interface IBMDSwitcherDownstreamKeyIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherDownstreamKey** downstreamKey);
};

/* Interface IBMDSwitcherKeyIterator - Key Iterator */

[
    object,
    uuid(ECC57473-0993-444F-B3CF-ED593CA25B09),
    helpstring("Key Iterator")
] interface IBMDSwitcherKeyIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherKey** key);
};

/* Interface IBMDSwitcherMediaPlayerIterator - Media Player Iterator */

[
    object,
    uuid(E910816F-59CB-4224-A77F-06DE3D232275),
    helpstring("Media Player Iterator")
] interface IBMDSwitcherMediaPlayerIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherMediaPlayer** mediaPlayer);
};

/* Interface IBMDSwitcherMultiViewIterator - MultiView Iterator */

[
    object,
    uuid(51FED981-C2AD-45A2-8618-61429CEED48D),
    helpstring("MultiView Iterator")
] interface IBMDSwitcherMultiViewIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherMultiView** multiView);
};

/* Interface IBMDSwitcherAudioMonitorOutputIterator - Audio Monitor Output Iterator */

[
    object,
    uuid(C76BAC6A-DFEE-4F2F-B161-226B481D556A),
    helpstring("Audio Monitor Output Iterator")
] interface IBMDSwitcherAudioMonitorOutputIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherAudioMonitorOutput** audioMonitorOutput);
};

/* Interface IBMDSwitcherAudioInputIterator - Audio Input Iterator */

[
    object,
    uuid(97959903-651E-4F68-BA42-1FA61508F189),
    helpstring("Audio Input Iterator")
] interface IBMDSwitcherAudioInputIterator : IUnknown
{
    HRESULT Next([out] IBMDSwitcherAudioInput** audioInput);
    HRESULT GetById([in] BMDSwitcherAudioInputId audioInputId, [out] IBMDSwitcherAudioInput** audioInput);
};

/* Interface IBMDSwitcherCallback - Switcher Callback Delegate */

[
    object,
    uuid(EE50FC2C-D0D7-42D6-965A-57498CECC1F6),
    helpstring("Switcher Callback Delegate")
] interface IBMDSwitcherCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherEventType eventType, [in] BMDSwitcherVideoMode coreVideoMode);
};

/* Interface IBMDSwitcher - Switcher Object */

[
    object,
    uuid(38A89278-D0EF-499A-A73F-464C8F9C866E),
    helpstring("Switcher Object")
] interface IBMDSwitcher : IUnknown
{
    HRESULT GetProductName([out] BSTR* productName);
    HRESULT GetVideoMode([out] BMDSwitcherVideoMode* videoMode);
    HRESULT SetVideoMode([in] BMDSwitcherVideoMode videoMode);
    HRESULT DoesSupportVideoMode([in] BMDSwitcherVideoMode videoMode, [out] BOOL* supported);
    HRESULT GetMethodForDownConvertedSD([out] BMDSwitcherDownConversionMethod* method);
    HRESULT SetMethodForDownConvertedSD([in] BMDSwitcherDownConversionMethod method);
    HRESULT GetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* downConvertedHDVideoMode);
    HRESULT SetDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode);
    HRESULT DoesSupportDownConvertedHDVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode downConvertedHDVideoMode, [out] BOOL* supported);
    HRESULT GetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [out] BMDSwitcherVideoMode* multiviewVideoMode);
    HRESULT SetMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode);
    HRESULT DoesSupportMultiViewVideoMode([in] BMDSwitcherVideoMode coreVideoMode, [in] BMDSwitcherVideoMode multiviewVideoMode, [out] BOOL* supported);
    HRESULT GetPowerStatus([out] BMDSwitcherPowerStatus* powerStatus);
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT AddCallback([in] IBMDSwitcherCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherCallback* callback);
};

/* Interface IBMDSwitcherDiscovery - Used to discover and connect to switchers */

[
    object,
    uuid(EB3FEF99-8561-4836-97B7-E5C768880D2A),
    helpstring("Used to discover and connect to switchers")
] interface IBMDSwitcherDiscovery : IUnknown
{
    HRESULT ConnectTo([in] BSTR deviceAddress, [out] IBMDSwitcher** switcherDevice, [out] BMDSwitcherConnectToFailure* failReason);
};

/* Interface IBMDSwitcherFrame - Frame */

[
    object,
    uuid(35A1F6A6-D317-4F89-A565-0F0BD414CF77),
    helpstring("Frame")
] interface IBMDSwitcherFrame : IUnknown
{
    int GetWidth(void);
    int GetHeight(void);
    int GetRowBytes(void);
    BMDSwitcherPixelFormat GetPixelFormat(void);
    HRESULT GetBytes([out] void** buffer);
};

/* Interface IBMDSwitcherAudio - Audio */

[
    object,
    uuid(E89BD25E-FD04-4FBE-A124-CCAF5ADBE5B2),
    helpstring("Audio")
] interface IBMDSwitcherAudio : IUnknown
{
    int GetSize(void);
    HRESULT GetBytes([out] void** buffer);
};

/* Interface IBMDSwitcherLockCallback - Lock Callback Delegate */

[
    object,
    uuid(56663D7A-85A8-4DA0-9B13-2A52D3C7740C),
    helpstring("Lock Callback Delegate")
] interface IBMDSwitcherLockCallback : IUnknown
{
    HRESULT Obtained(void);
};

/* Interface IBMDSwitcherStillsCallback - Stills Callback Delegate */

[
    object,
    uuid(7AF82DC6-9A43-4CD2-9712-585E6BA159BA),
    helpstring("Stills Callback Delegate")
] interface IBMDSwitcherStillsCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherMediaPoolEventType eventType, [in] IBMDSwitcherFrame* frame, [in] int index);
};

/* Interface IBMDSwitcherStills - Stills */

[
    object,
    uuid(235C654C-7389-4D3E-AB46-D0078D065940),
    helpstring("Stills")
] interface IBMDSwitcherStills : IUnknown
{
    HRESULT GetCount([out] unsigned int* count);
    HRESULT IsValid([in] unsigned int index, [out] BOOL* valid);
    HRESULT GetName([in] unsigned int index, [out] BSTR* name);
    HRESULT SetName([in] unsigned int index, [in] BSTR name);
    HRESULT GetHash([in] unsigned int index, [out] BMDSwitcherHash* hash);
    HRESULT SetInvalid([in] unsigned int index);
    HRESULT Lock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Unlock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Upload([in] unsigned int index, [in] BSTR name, [in] IBMDSwitcherFrame* frame);
    HRESULT Download([in] unsigned int index);
    HRESULT CancelTransfer(void);
    HRESULT GetProgress([out] double* progress);
    HRESULT AddCallback([in] IBMDSwitcherStillsCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherStillsCallback* callback);
};

/* Interface IBMDSwitcherClipCallback - Clip Callback Delegate */

[
    object,
    uuid(407117B4-B6A8-46D2-9911-43254171B1B7),
    helpstring("Clip Callback Delegate")
] interface IBMDSwitcherClipCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherMediaPoolEventType eventType, [in] IBMDSwitcherFrame* frame, [in] int frameIndex, [in] IBMDSwitcherAudio* audio, [in] int clipIndex);
};

/* Interface IBMDSwitcherClip - Clip */

[
    object,
    uuid(94AAF18A-7AF4-4721-8C1E-1843D42644E7),
    helpstring("Clip")
] interface IBMDSwitcherClip : IUnknown
{
    HRESULT GetIndex([out] unsigned int* index);
    HRESULT IsValid([out] BOOL* valid);
    HRESULT GetName([out] BSTR* name);
    HRESULT SetName([in] BSTR name);
    HRESULT SetValid([in] BSTR name, [in] unsigned int frameCount);
    HRESULT SetInvalid(void);
    HRESULT GetFrameCount([out] unsigned int* frameCount);
    HRESULT GetMaxFrameCount([out] unsigned int* maxFrameCount);
    HRESULT IsFrameValid([in] unsigned int frameIndex, [out] BOOL* valid);
    HRESULT GetFrameHash([in] unsigned int frameIndex, [out] BMDSwitcherHash* hash);
    HRESULT IsAudioValid([out] BOOL* valid);
    HRESULT GetAudioName([out] BSTR* name);
    HRESULT SetAudioName([in] BSTR name);
    HRESULT GetAudioHash([out] BMDSwitcherHash* hash);
    HRESULT SetAudioInvalid(void);
    HRESULT Lock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT Unlock([in] IBMDSwitcherLockCallback* lockCallback);
    HRESULT UploadFrame([in] unsigned int frameIndex, [in] IBMDSwitcherFrame* frame);
    HRESULT DownloadFrame([in] unsigned int frameIndex);
    HRESULT UploadAudio([in] BSTR name, [in] IBMDSwitcherAudio* audio);
    HRESULT DownloadAudio(void);
    HRESULT CancelTransfer(void);
    HRESULT GetProgress([out] double* progress);
    HRESULT AddCallback([in] IBMDSwitcherClipCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherClipCallback* callback);
};

/* Interface IBMDSwitcherMediaPoolCallback - Media Pool Callback Delegate */

[
    object,
    uuid(B8617A16-1B17-4FD6-93BF-664FA71F2A50),
    helpstring("Media Pool Callback Delegate")
] interface IBMDSwitcherMediaPoolCallback : IUnknown
{
    HRESULT ClipFrameMaxCountsChanged(void);
    HRESULT FrameTotalForClipsChanged(void);
};

/* Interface IBMDSwitcherMediaPool - Frame Pool for Media Players */

[
    object,
    uuid(59A3056E-7B62-46F0-8B78-1FB149F7372C),
    helpstring("Frame Pool for Media Players")
] interface IBMDSwitcherMediaPool : IUnknown
{
    HRESULT GetStills([out] IBMDSwitcherStills** stills);
    HRESULT GetClip([in] unsigned int clipIndex, [out] IBMDSwitcherClip** clip);
    HRESULT GetClipCount([out] unsigned int* clipCount);
    HRESULT CreateFrame([in] BMDSwitcherPixelFormat pixelFormat, [in] unsigned int width, [in] unsigned int height, [out] IBMDSwitcherFrame** frame);
    HRESULT CreateAudio([in] unsigned int sizeBytes, [out] IBMDSwitcherAudio** audio);
    HRESULT GetFrameTotalForClips([out] unsigned int* total);
    HRESULT GetClipMaxFrameCounts([in] unsigned int clipCount, [out] unsigned int* clipMaxFrameCounts); // one array element per clip, each element holds the maximum frame count
    HRESULT SetClipMaxFrameCounts([in] unsigned int clipCount, [in] const unsigned int* clipMaxFrameCounts); // one array element per clip, each element holds the maximum frame count
    HRESULT Clear(void); // clears all stills, clips and clip audio
    HRESULT AddCallback([in] IBMDSwitcherMediaPoolCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMediaPoolCallback* callback);
};

/* Interface IBMDSwitcherCameraControlParameterIterator - Camera Control Parameter Iterator */

[
    object,
    uuid(6B6E289F-0847-480A-A0BD-E8FB78A5505A),
    helpstring("Camera Control Parameter Iterator")
] interface IBMDSwitcherCameraControlParameterIterator : IUnknown
{
    HRESULT Next([out] unsigned int* destinationDevice, [out] unsigned int* category, [out] unsigned int* parameter);
};

/* Interface IBMDSwitcherCameraControlCallback - Switcher Camera Control Callback Delegate */

[
    object,
    uuid(90337CAC-9376-4A62-A58F-10936130970B),
    helpstring("Switcher Camera Control Callback Delegate")
] interface IBMDSwitcherCameraControlCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherCameraControlEventType eventType, [in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter);
};

/* Interface IBMDSwitcherCameraControl - Switcher Camera Control Object */

[
    object,
    uuid(95D7C0B6-9A84-4715-BE27-8A9CCAA9E6A9),
    helpstring("Switcher Camera Control Object")
] interface IBMDSwitcherCameraControl : IUnknown
{
    HRESULT CreateIterator([in] REFIID iid, [out] LPVOID* ppv);
    HRESULT GetPeriodicFlushInterval([out] unsigned int* intervalMs /* In milliseconds */);
    HRESULT SetPeriodicFlushInterval([in] unsigned int intervalMs /* In milliseconds */);
    HRESULT GetParameterInfo([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [out] BMDSwitcherCameraControlParameterType* type, [out] unsigned int* count);
    HRESULT GetParameterPeriodicFlushEnabled([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [out] BOOL* enabled);
    HRESULT SetParameterPeriodicFlushEnabled([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] BOOL enabled);
    HRESULT SetFlags([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const BOOL* values);
    HRESULT ToggleFlags([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const BOOL* values);
    HRESULT GetFlags([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] BOOL* values);
    HRESULT SetBytes([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const signed char* bytes);
    HRESULT OffsetBytes([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const signed char* bytes);
    HRESULT GetBytes([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] signed char* bytes);
    HRESULT SetInt16s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const short* values);
    HRESULT OffsetInt16s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const short* values);
    HRESULT GetInt16s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] short* values);
    HRESULT SetInt32s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const int* values);
    HRESULT OffsetInt32s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const int* values);
    HRESULT GetInt32s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] int* values);
    HRESULT SetInt64s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const long long* values);
    HRESULT OffsetInt64s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const long long* values);
    HRESULT GetInt64s([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] long long* values);
    HRESULT OffsetFloats([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const double* values);
    HRESULT SetFloats([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in] unsigned int count, [in] const double* values);
    HRESULT GetFloats([in] unsigned int destinationDevice, [in] unsigned int category, [in] unsigned int parameter, [in, out] unsigned int* count, [out] double* values);
    HRESULT AddCallback([in] IBMDSwitcherCameraControlCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherCameraControlCallback* callback);
};

/* Interface IBMDSwitcherMacro - Macro */

[
    object,
    uuid(2F1DF648-CB02-48D5-B5EB-B857BBD626A7),
    helpstring("Macro")
] interface IBMDSwitcherMacro : IUnknown
{
    int GetSize(void);
    HRESULT GetBytes([out] void** buffer);
};

/* Interface IBMDSwitcherTransferMacro - MacroTransfer */

[
    object,
    uuid(9BAD28DB-F0CC-4696-82EE-B1E3E5A7C129),
    helpstring("MacroTransfer")
] interface IBMDSwitcherTransferMacro : IUnknown
{
    HRESULT Cancel(void);
    HRESULT GetProgress([out] double* progress);
    HRESULT GetMacro([out] IBMDSwitcherMacro** macro);
};

/* Interface IBMDSwitcherMacroPoolCallback - Macro Pool Callback Delegate */

[
    object,
    uuid(E29294A0-FB4C-418D-9AE1-C6CBA288104F),
    helpstring("Macro Pool Callback Delegate")
] interface IBMDSwitcherMacroPoolCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherMacroPoolEventType eventType, [in] unsigned int index, [in] IBMDSwitcherTransferMacro* macroTransfer);
};

/* Interface IBMDSwitcherMacroPool - Management of Macros */

[
    object,
    uuid(5FA28BFC-7934-42F4-BED8-8744D62D210F),
    helpstring("Management of Macros")
] interface IBMDSwitcherMacroPool : IUnknown
{
    HRESULT GetMaxCount([out] unsigned int* maxCount); // Returns the maximum number of macros that can be stored
    HRESULT Delete([in] unsigned int index); // Delete a macro
    HRESULT IsValid([in] unsigned int index, [out] BOOL* valid); // Returns whether the specified macro is valid
    HRESULT HasUnsupportedOps([in] unsigned int index, [out] BOOL* hasUnsupportedOps); // Returns whether the specified macro has any unsupported or invalid operations
    HRESULT GetName([in] unsigned int index, [out] BSTR* name); // Macro's name
    HRESULT SetName([in] unsigned int index, [in] BSTR name);
    HRESULT GetDescription([in] unsigned int index, [out] BSTR* description); // Macro's description property
    HRESULT SetDescription([in] unsigned int index, [in] BSTR description);
    HRESULT CreateMacro([in] unsigned int sizeBytes, [out] IBMDSwitcherMacro** macro);
    HRESULT Upload([in] unsigned int index, [in] BSTR name, [in] BSTR description, [in] IBMDSwitcherMacro* macro, [out] IBMDSwitcherTransferMacro** macroTransfer);
    HRESULT Download([in] unsigned int index, [out] IBMDSwitcherTransferMacro** macroTransfer);
    HRESULT AddCallback([in] IBMDSwitcherMacroPoolCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMacroPoolCallback* callback);
};

/* Interface IBMDSwitcherMacroControlCallback - Macro Control Callback Delegate */

[
    object,
    uuid(F6A62317-60F6-4D5C-A5DD-2DC372B9F4FF),
    helpstring("Macro Control Callback Delegate")
] interface IBMDSwitcherMacroControlCallback : IUnknown
{
    HRESULT Notify([in] BMDSwitcherMacroControlEventType eventType);
};

/* Interface IBMDSwitcherMacroControl - Recording and Playback of Macros */

[
    object,
    uuid(2E23E657-A7F0-4C4A-BCBE-4B8D3DD061AC),
    helpstring("Recording and Playback of Macros")
] interface IBMDSwitcherMacroControl : IUnknown
{
    HRESULT Run([in] unsigned int index); // Begin running a macro
    HRESULT GetLoop([out] BOOL* loop);
    HRESULT SetLoop([in] BOOL loop);
    HRESULT ResumeRunning(void); // Resume execution of the currently running macro that is waiting for the user to continue
    HRESULT StopRunning(void); // Terminate execution of the currently running macro
    HRESULT Record([in] unsigned int index, [in] BSTR name, [in] BSTR description); // Start recording a new macro
    HRESULT RecordUserWait(void); // Insert a user wait event into the currently recording macro
    HRESULT RecordPause([in] unsigned int frames); // Insert a frame delay into currently recording macro
    HRESULT StopRecording(void); // Stop recording and save the current macro
    HRESULT GetRunStatus([out] BMDSwitcherMacroRunStatus* status, [out] BOOL* loop, [out] unsigned int* index); // Get the current macro running status
    HRESULT GetRecordStatus([out] BMDSwitcherMacroRecordStatus* status, [out] unsigned int* index); // Get the current macro recording status
    HRESULT AddCallback([in] IBMDSwitcherMacroControlCallback* callback);
    HRESULT RemoveCallback([in] IBMDSwitcherMacroControlCallback* callback);
};

/* Coclasses */

importlib("stdole2.tlb");

[
    uuid(49895038-FB6D-4AF7-A637-7A92F09F8655),
    helpstring("CBMDSwitcherDiscovery Class")
] coclass CBMDSwitcherDiscovery
{
    [default] interface IBMDSwitcherDiscovery;
};


// import deprecated interfaces
#include "BMDSwitcherAPI_v3_5.idl"
#include "BMDSwitcherAPI_v4_0.idl"
#include "BMDSwitcherAPI_v4_1_3.idl"
#include "BMDSwitcherAPI_v6_0.idl"
#include "BMDSwitcherAPI_v6_4_1.idl"
#include "BMDSwitcherAPI_v6_5_1.idl"
};
